structure

-----
App.css
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

-----
App.jsx
// src/App.jsx
import { useState } from 'react';
import { AuthScreen } from './components/auth/AuthScreen';
import { Dashboard } from './components/dashboard/Dashboard';
import { Toaster } from './components/ui/sonner';
import { useAppContext } from './context/AppContext';

function App() {
  const { user, handleAuth, handleLogout } = useAppContext();
  const [activeView, setActiveView] = useState('projects');

  if (!user) {
    return (
      <>
        <AuthScreen onAuth={handleAuth} />
        <Toaster />
      </>
    );
  }

  return (
    <>
      <Dashboard
        user={user}
        activeView={activeView}
        onViewChange={setActiveView}
        onLogout={handleLogout}
      />
      <Toaster />
    </>
  );
}

export default App;
-----
index.css
/* src/index.css */
@import './styles/theme.css'; /* <-- ADD THIS LINE AT THE TOP */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: oklch(0.98 0.005 270);
    --foreground: oklch(0.2 0.02 250);
    
    --card: oklch(1 0 0);
    --card-foreground: oklch(0.2 0.02 250);
    
    --popover: oklch(1 0 0);
    --popover-foreground: oklch(0.2 0.02 250);
    
    --primary: oklch(0.45 0.15 250);
    --primary-foreground: oklch(1 0 0);
    
    --secondary: oklch(0.94 0.01 250);
    --secondary-foreground: oklch(0.35 0.05 250);
    
    --muted: oklch(0.94 0.01 250);
    --muted-foreground: oklch(0.5 0.02 250);
    
    --accent: oklch(0.7 0.15 45);
    --accent-foreground: oklch(1 0 0);
    
    --destructive: oklch(0.6 0.2 25);
    --destructive-foreground: oklch(1 0 0);
    
    --success: oklch(0.65 0.12 180);
    --success-foreground: oklch(1 0 0);
    
    --border: oklch(0.92 0.01 250);
    --input: oklch(0.92 0.01 250);
    --ring: oklch(0.45 0.15 250);
    
    --radius: 0.75rem;
  }

  /* You can add a dark theme here if you plan to implement it */
  /* .dark { ... } */

  * {
    @apply border-border;
  }
  
  body {
    font-family: 'Inter', system-ui, -apple-system, sans-serif;
  }
}
-----
m.py
import os

def is_text_file(filepath):
    # Returns True if the file is likely to be a text file
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            f.read(2048)
        return True
    except Exception:
        return False

def main(root_folder='.', out_file='structure.txt'):
    with open(out_file, 'w', encoding='utf-8') as outf:
        outf.write("structure\n\n")
        for dirpath, _, filenames in os.walk(root_folder):
            for fname in filenames:
                relpath = os.path.relpath(os.path.join(dirpath, fname), root_folder)
                outf.write(f"-----\n{relpath}\n")
                path = os.path.join(dirpath, fname)
                if is_text_file(path):
                    try:
                        with open(path, 'r', encoding='utf-8') as fin:
                            content = fin.read()
                        outf.write(content + "\n")
                    except Exception as e:
                        outf.write(f"[Could not read file: {e}]\n")
                else:
                    outf.write("[Binary file or not displayable]\n")

if __name__ == "__main__":
    main('.', 'structure.txt')

-----
main.jsx
// src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';

// Import Radix Colors CSS first
import '@radix-ui/colors/slate.css';
import '@radix-ui/colors/slate-dark.css';
import '@radix-ui/colors/blue.css';
import '@radix-ui/colors/blue-dark.css';
import '@radix-ui/colors/violet.css';
import '@radix-ui/colors/violet-dark.css';

// Import your main styles
import './index.css';

import App from './App.jsx';
import { AppProvider } from './context/AppContext.jsx';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <AppProvider>
      <App />
    </AppProvider>
  </React.StrictMode>,
);
-----
structure.txt

-----
components\auth\AuthScreen.jsx
// src/components/auth/AuthScreen.jsx

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
// --- FINAL CORRECTED ICON IMPORTS ---
import { Brain, Buildings, Envelope, Lock, User, Sparkle } from '@phosphor-icons/react';
import { toast } from 'sonner';
import { motion } from 'framer-motion';

export function AuthScreen({ onAuth }) {
  const [isLoading, setIsLoading] = useState(false);
  const [loginForm, setLoginForm] = useState({
    email: '',
    password: ''
  });
  const [signupForm, setSignupForm] = useState({
    name: '',
    email: '',
    password: '',
    company: '',
    role: ''
  });

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    setTimeout(() => {
      if (!loginForm.email || !loginForm.password) {
        toast.error("Please fill in all fields.");
        setIsLoading(false);
        return;
      }
      const user = {
        id: Date.now(),
        name: loginForm.email.split('@')[0],
        email: loginForm.email,
        role: 'Admin',
        company: 'Demo Company',
        avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${loginForm.email}`,
        joinedAt: new Date().toISOString()
      };
      
      onAuth(user);
      toast.success('Welcome back!');
      setIsLoading(false);
    }, 1500);
  };

  const handleSignup = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    setTimeout(() => {
      if (!signupForm.name || !signupForm.email || !signupForm.password || !signupForm.company || !signupForm.role) {
        toast.error("Please fill in all fields.");
        setIsLoading(false);
        return;
      }
      const user = {
        id: Date.now(),
        name: signupForm.name,
        email: signupForm.email,
        role: signupForm.role,
        company: signupForm.company,
        avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${signupForm.email}`,
        joinedAt: new Date().toISOString()
      };
      
      onAuth(user);
      toast.success('Account created successfully!');
      setIsLoading(false);
    }, 2000);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5 flex items-center justify-center p-4">
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_20%_80%,rgba(120,119,198,0.1),transparent_50%)] pointer-events-none" />
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_80%_20%,rgba(255,154,158,0.1),transparent_50%)] pointer-events-none" />
      
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="w-full max-w-md"
      >
        <div className="text-center mb-8">
          <motion.div
            initial={{ scale: 0.8 }}
            animate={{ scale: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="inline-flex items-center justify-center w-16 h-16 bg-primary/10 rounded-2xl mb-4 backdrop-blur-sm border border-primary/20"
          >
            <Brain size={32} className="text-primary" weight="duotone" />
          </motion.div>
          <h1 className="text-3xl font-bold tracking-tight">AI Platform</h1>
          <p className="text-muted-foreground mt-2">Build and deploy custom AI assistants</p>
        </div>

        <Card className="backdrop-blur-sm bg-card/80 border-border/50 shadow-xl">
          <Tabs defaultValue="login" className="w-full">
            <TabsList className="grid w-full grid-cols-2 mb-6">
              <TabsTrigger value="login">Sign In</TabsTrigger>
              <TabsTrigger value="signup">Sign Up</TabsTrigger>
            </TabsList>
            
            <TabsContent value="login">
              <form onSubmit={handleLogin}>
                <CardHeader className="space-y-1 pb-4">
                  <CardTitle className="text-xl">Welcome back</CardTitle>
                  <CardDescription>Sign in to your account to continue</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="login-email">Email</Label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 flex items-center justify-center w-10">
                        <Envelope size={18} className="text-muted-foreground" />
                      </div>
                      <Input
                        id="login-email"
                        type="email"
                        placeholder="you@company.com"
                        className="pl-10 h-11"
                        value={loginForm.email}
                        onChange={(e) => setLoginForm(prev => ({ ...prev, email: e.target.value }))}
                        required
                      />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="login-password">Password</Label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 flex items-center justify-center w-10">
                        <Lock size={18} className="text-muted-foreground" />
                      </div>
                      <Input
                        id="login-password"
                        type="password"
                        placeholder="Enter your password"
                        className="pl-10 h-11"
                        value={loginForm.password}
                        onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}
                        required
                      />
                    </div>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button type="submit" className="w-full h-11" disabled={isLoading}>
                    {isLoading ? (
                      <div className="flex items-center justify-center">
                        <motion.div
                          animate={{ rotate: 360 }}
                          transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
                          className="w-5 h-5 border-2 border-current border-t-transparent rounded-full"
                        />
                      </div>
                    ) : (
                      'Sign In'
                    )}
                  </Button>
                </CardFooter>
              </form>
            </TabsContent>
            
            <TabsContent value="signup">
              <form onSubmit={handleSignup}>
                <CardHeader className="space-y-1 pb-4">
                  <CardTitle className="text-xl">Create account</CardTitle>
                  <CardDescription>Get started with your AI platform today</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="signup-name">Full Name</Label>
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 flex items-center justify-center w-10">
                          <User size={18} className="text-muted-foreground" />
                        </div>
                        <Input
                          id="signup-name"
                          placeholder="John Doe"
                          className="pl-10 h-11"
                          value={signupForm.name}
                          onChange={(e) => setSignupForm(prev => ({ ...prev, name: e.target.value }))}
                          required
                        />
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="signup-role">Role</Label>
                      <Select value={signupForm.role} onValueChange={(value) => setSignupForm(prev => ({ ...prev, role: value }))}>
                        <SelectTrigger className="h-11">
                          <SelectValue placeholder="Select role" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Admin">Admin</SelectItem>
                          <SelectItem value="Developer">Developer</SelectItem>
                          <SelectItem value="Editor">Editor</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="signup-company">Company</Label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 flex items-center justify-center w-10">
                        <Buildings size={18} className="text-muted-foreground" />
                      </div>
                      <Input
                        id="signup-company"
                        placeholder="Your Company"
                        className="pl-10 h-11"
                        value={signupForm.company}
                        onChange={(e) => setSignupForm(prev => ({ ...prev, company: e.target.value }))}
                        required
                      />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="signup-email">Email</Label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 flex items-center justify-center w-10">
                        <Envelope size={18} className="text-muted-foreground" />
                      </div>
                      <Input
                        id="signup-email"
                        type="email"
                        placeholder="you@company.com"
                        className="pl-10 h-11"
                        value={signupForm.email}
                        onChange={(e) => setSignupForm(prev => ({ ...prev, email: e.target.value }))}
                        required
                      />
                    </div>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="signup-password">Password</Label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 flex items-center justify-center w-10">
                        <Lock size={18} className="text-muted-foreground" />
                      </div>
                      <Input
                        id="signup-password"
                        type="password"
                        placeholder="Create a strong password"
                        className="pl-10 h-11"
                        value={signupForm.password}
                        onChange={(e) => setSignupForm(prev => ({ ...prev, password: e.target.value }))}
                        required
                      />
                    </div>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button type="submit" className="w-full h-11" disabled={isLoading}>
                    {isLoading ? (
                      <div className="flex items-center justify-center">
                        <motion.div
                          animate={{ rotate: 360 }}
                          transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
                          className="w-5 h-5 border-2 border-current border-t-transparent rounded-full"
                        />
                      </div>
                    ) : (
                      <div className="flex items-center gap-2">
                        {/* --- CORRECTED ICON COMPONENT --- */}
                        <Sparkle size={18} weight="duotone" />
                        Create Account
                      </div>
                    )}
                  </Button>
                </CardFooter>
              </form>
            </TabsContent>
          </Tabs>
        </Card>
        
        <p className="text-center text-sm text-muted-foreground mt-6">
          By signing up, you agree to our Terms of Service and Privacy Policy
        </p>
      </motion.div>
    </div>
  );
}
-----
components\dashboard\AnalyticsView.jsx
import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell
} from 'recharts';
import { 
  ChartBar, 
  TrendUp, 
  Lightning,
  Users,
  Cpu,
  CalendarBlank
} from '@phosphor-icons/react';
import { motion } from 'framer-motion';
import { useAppContext } from '../../context/AppContext';

export function AnalyticsView({ user }) {
  const [timeRange, setTimeRange] = useState('7d');
  const { projects } = useAppContext(); // Using context though not directly in JSX

  // Mock analytics data
  const apiCallsData = [
    { date: '2024-01-01', calls: 245, tokens: 12500 },
    { date: '2024-01-02', calls: 378, tokens: 18900 },
    { date: '2024-01-03', calls: 456, tokens: 22800 },
    { date: '2024-01-04', calls: 323, tokens: 16150 },
    { date: '2024-01-05', calls: 567, tokens: 28350 },
    { date: '2024-01-06', calls: 234, tokens: 11700 },
    { date: '2024-01-07', calls: 678, tokens: 33900 }
  ];

  const projectUsageData = [
    { name: 'Customer Support Bot', value: 45, calls: 1247, color: '#3b82f6' },
    { name: 'Knowledge Assistant', value: 30, calls: 832, color: '#10b981' },
    { name: 'Content Generator', value: 15, calls: 416, color: '#f59e0b' },
    { name: 'Code Helper', value: 10, calls: 277, color: '#ef4444' }
  ];

  const responseTimeData = [
    { time: '00:00', avg: 450, p95: 650 },
    { time: '04:00', avg: 320, p95: 480 },
    { time: '08:00', avg: 780, p95: 1200 },
    { time: '12:00', avg: 890, p95: 1350 },
    { time: '16:00', avg: 1020, p95: 1580 },
    { time: '20:00', avg: 670, p95: 920 }
  ];

  const metrics = [
    { title: 'Total API Calls', value: '2,847', change: '+12.5%', trend: 'up', icon: ChartBar, color: 'text-blue-600' },
    { title: 'Response Time', value: '680ms', change: '-8.2%', trend: 'down', icon: Lightning, color: 'text-green-600' },
    { title: 'Active Users', value: '156', change: '+24.1%', trend: 'up', icon: Users, color: 'text-purple-600' },
    { title: 'Token Usage', value: '142.5K', change: '+15.3%', trend: 'up', icon: Cpu, color: 'text-orange-600' }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Analytics</h2>
          <p className="text-muted-foreground">Monitor your AI platform performance and usage</p>
        </div>
        
        <Select value={timeRange} onValueChange={setTimeRange}>
          <SelectTrigger className="w-[140px]">
            <CalendarBlank size={16} className="mr-2" />
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="1d">Last 24h</SelectItem>
            <SelectItem value="7d">Last 7 days</SelectItem>
            <SelectItem value="30d">Last 30 days</SelectItem>
            <SelectItem value="90d">Last 90 days</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {metrics.map((metric, index) => {
          const Icon = metric.icon;
          const isPositive = metric.trend === 'up';
          
          return (
            <motion.div
              key={metric.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: index * 0.1 }}
            >
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-muted-foreground">{metric.title}</p>
                      <p className="text-2xl font-bold">{metric.value}</p>
                      <div className="flex items-center gap-1 mt-2">
                        <TrendUp size={14} className={`${isPositive ? 'text-green-600' : 'text-red-600 rotate-180'}`} />
                        <span className={`text-xs font-medium ${isPositive ? 'text-green-600' : 'text-red-600'}`}>
                          {metric.change}
                        </span>
                      </div>
                    </div>
                    <Icon size={24} className={metric.color} weight="duotone" />
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          );
        })}
      </div>

      <Tabs defaultValue="usage" className="space-y-4">
        <TabsList>
          <TabsTrigger value="usage">Usage Trends</TabsTrigger>
          <TabsTrigger value="performance">Performance</TabsTrigger>
          <TabsTrigger value="projects">Project Breakdown</TabsTrigger>
        </TabsList>

        <TabsContent value="usage" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle>API Calls Over Time</CardTitle>
                <CardDescription>Daily API call volume</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={apiCallsData}>
                    <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                    <XAxis 
                      dataKey="date" 
                      fontSize={12}
                      tickFormatter={(value) => new Date(value).toLocaleDateString('en', { month: 'short', day: 'numeric' })}
                    />
                    <YAxis fontSize={12} />
                    <Tooltip 
                      labelFormatter={(value) => new Date(value).toLocaleDateString()}
                      formatter={(value) => [value.toLocaleString(), 'API Calls']}
                    />
                    <Bar dataKey="calls" fill="oklch(0.45 0.15 250)" radius={[4, 4, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Token Consumption</CardTitle>
                <CardDescription>Daily token usage trends</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={apiCallsData}>
                    <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                    <XAxis 
                      dataKey="date" 
                      fontSize={12}
                      tickFormatter={(value) => new Date(value).toLocaleDateString('en', { month: 'short', day: 'numeric' })}
                    />
                    <YAxis fontSize={12} />
                    <Tooltip 
                      labelFormatter={(value) => new Date(value).toLocaleDateString()}
                      formatter={(value) => [value.toLocaleString(), 'Tokens']}
                    />
                    <Line 
                      type="monotone" 
                      dataKey="tokens" 
                      stroke="oklch(0.65 0.12 180)" 
                      strokeWidth={3}
                      dot={{ fill: 'oklch(0.65 0.12 180)', strokeWidth: 2, r: 4 }}
                      activeDot={{ r: 6 }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="performance" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Response Time Analysis</CardTitle>
              <CardDescription>Average and 95th percentile response times throughout the day</CardDescription>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={400}>
                <LineChart data={responseTimeData}>
                  <CartesianGrid strokeDasharray="3 3" className="opacity-30" />
                  <XAxis dataKey="time" fontSize={12} />
                  <YAxis fontSize={12} />
                  <Tooltip formatter={(value, name) => [`${value}ms`, name === 'avg' ? 'Average' : '95th Percentile']} />
                  <Line type="monotone" dataKey="avg" stroke="oklch(0.45 0.15 250)" strokeWidth={3} name="avg" />
                  <Line type="monotone" dataKey="p95" stroke="oklch(0.7 0.15 45)" strokeWidth={2} strokeDasharray="5 5" name="p95" />
                </LineChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="projects" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <Card>
              <CardHeader>
                <CardTitle>Usage by Project</CardTitle>
                <CardDescription>API call distribution across projects</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <PieChart>
                    <Pie
                      data={projectUsageData}
                      cx="50%"
                      cy="50%"
                      innerRadius={60}
                      outerRadius={120}
                      paddingAngle={5}
                      dataKey="value"
                    >
                      {projectUsageData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value) => [`${value}%`, 'Usage']} />
                  </PieChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Project Performance</CardTitle>
                <CardDescription>Detailed breakdown by project</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {projectUsageData.map((project) => (
                    <div key={project.name} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="w-3 h-3 rounded-full" style={{ backgroundColor: project.color }} />
                        <div>
                          <p className="font-medium text-sm">{project.name}</p>
                          <p className="text-xs text-muted-foreground">{project.calls} API calls</p>
                        </div>
                      </div>
                      <Badge variant="secondary">{project.value}%</Badge>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
-----
components\dashboard\BillingView.jsx
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { CreditCard, Download, Star, Check, Lightning, Calendar, TrendUp, Receipt, Crown, Sparkle } from '@phosphor-icons/react';
import { toast } from 'sonner';
import { motion } from 'framer-motion';

export function BillingView({ user }) {
  const [currentPlan, setCurrentPlan] = useState('professional');
  const [usage] = useState({
    apiCalls: 8547,
    maxApiCalls: 10000,
    storage: 2.3,
    maxStorage: 10
  });
  
  const [invoices] = useState([
    { id: 'inv_001', date: '2024-01-15', amount: 49.00, status: 'paid', description: 'Professional Plan - January 2024' },
    { id: 'inv_002', date: '2024-12-15', amount: 49.00, status: 'paid', description: 'Professional Plan - December 2023' },
    { id: 'inv_003', date: '2023-11-15', amount: 49.00, status: 'paid', description: 'Professional Plan - November 2023' }
  ]);

  const [isUpgradeDialogOpen, setIsUpgradeDialogOpen] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState(null);

  const plans = [
    {
      id: 'starter', name: 'Starter', price: 0, description: 'Perfect for getting started',
      features: ['1,000 API calls/month', '1 GB storage', 'Email support', 'Basic analytics', '1 team member'],
      apiCalls: 1000, storage: '1 GB', support: 'Email'
    },
    {
      id: 'professional', name: 'Professional', price: 49, description: 'Best for growing businesses',
      features: ['10,000 API calls/month', '10 GB storage', 'Priority support', 'Advanced analytics', '5 team members', 'Custom models'],
      apiCalls: 10000, storage: '10 GB', support: 'Priority', popular: true
    },
    {
      id: 'enterprise', name: 'Enterprise', price: 199, description: 'For large organizations',
      features: ['Unlimited API calls', '100 GB storage', '24/7 phone support', 'Custom analytics', 'Unlimited team members', 'Custom integrations', 'Dedicated account manager'],
      apiCalls: Infinity, storage: '100 GB', support: '24/7 Phone'
    }
  ];

  const currentPlanData = plans.find(p => p.id === currentPlan) || plans[1];

  const handleUpgradePlan = (plan) => {
    setSelectedPlan(plan);
    setIsUpgradeDialogOpen(true);
  };

  const handleConfirmUpgrade = () => {
    if (!selectedPlan) return;
    setCurrentPlan(selectedPlan.id);
    toast.success(`Successfully upgraded to ${selectedPlan.name} plan!`);
    setIsUpgradeDialogOpen(false);
    setSelectedPlan(null);
  };

  const handleDownloadInvoice = (invoice) => {
    const blob = new Blob([JSON.stringify(invoice, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `invoice-${invoice.id}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success('Invoice downloaded');
  };

  const handleUpdatePaymentMethod = () => {
    toast.success('Payment method update initiated.');
  };

  const handleViewBillingHistory = () => {
    const billingSection = document.getElementById('billing-history');
    if (billingSection) {
      billingSection.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'paid': return 'bg-green-100 text-green-800 border-green-200';
      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'failed': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const formatPrice = (price) => (price === 0 ? 'Free' : `$${price}/month`);

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-3xl font-bold tracking-tight">Billing & Subscription</h2>
        <p className="text-muted-foreground">Manage your subscription and billing information</p>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="flex items-center gap-2">
                  {currentPlanData.popular && <Star size={20} className="text-yellow-500" />}
                  Current Plan: {currentPlanData.name}
                </CardTitle>
                <CardDescription>{currentPlanData.description}</CardDescription>
              </div>
              <Badge variant="secondary" className="text-lg font-bold">{formatPrice(currentPlanData.price)}</Badge>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium">API Calls</span>
                  <span className="text-sm text-muted-foreground">{usage.apiCalls.toLocaleString()} / {usage.maxApiCalls.toLocaleString()}</span>
                </div>
                <Progress value={(usage.apiCalls / usage.maxApiCalls) * 100} className="h-2" />
                <p className="text-xs text-muted-foreground mt-1">{Math.round(((usage.maxApiCalls - usage.apiCalls) / usage.maxApiCalls) * 100)}% remaining</p>
              </div>
              <div>
                <div className="flex justify-between items-center mb-2">
                  <span className="text-sm font-medium">Storage</span>
                  <span className="text-sm text-muted-foreground">{usage.storage} GB / {currentPlanData.storage}</span>
                </div>
                <Progress value={(usage.storage / parseFloat(currentPlanData.storage)) * 100} className="h-2" />
              </div>
            </div>
            <div>
              <h4 className="font-medium mb-3">Plan Features</h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                {currentPlanData.features.map((feature, index) => (
                  <div key={index} className="flex items-center gap-2 text-sm">
                    <Check size={16} className="text-green-500" />
                    {feature}
                  </div>
                ))}
              </div>
            </div>
            <div className="flex gap-2 pt-4 border-t">
              <Button className="gap-2" onClick={handleUpdatePaymentMethod}><CreditCard size={16} />Update Payment Method</Button>
              <Button variant="outline" className="gap-2" onClick={handleViewBillingHistory}><Receipt size={16} />Billing History</Button>
            </div>
          </CardContent>
        </Card>
        <div className="space-y-4">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Next Billing</p>
                  <p className="text-lg font-bold">Feb 15, 2025</p>
                </div>
                <Calendar size={24} className="text-primary" weight="duotone" />
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Monthly Spend</p>
                  <p className="text-lg font-bold">${currentPlanData.price}</p>
                </div>
                <TrendUp size={24} className="text-green-600" weight="duotone" />
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Total API Calls</p>
                  <p className="text-lg font-bold">{usage.apiCalls.toLocaleString()}</p>
                </div>
                <Lightning size={24} className="text-primary" weight="duotone" />
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>Available Plans</CardTitle>
          <CardDescription>Choose the plan that best fits your needs</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {plans.map((plan, index) => (
              <motion.div
                key={plan.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
                className={`relative rounded-lg border p-6 ${plan.id === currentPlan ? 'border-primary bg-primary/5' : 'border-border hover:border-primary/50'} ${plan.popular ? 'ring-2 ring-primary' : ''}`}
              >
                {plan.popular && (
                  <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                    <Badge className="bg-primary text-primary-foreground}"><Star size={12} className="mr-1" />Most Popular</Badge>
                  </div>
                )}
                <div className="text-center mb-6">
                  <h3 className="text-lg font-semibold flex items-center justify-center gap-2">
                    {plan.id === 'enterprise' && <Crown size={20} className="text-yellow-500" />}
                    {plan.id === 'professional' && <Sparkle size={20} className="text-primary" />}
                    {plan.name}
                  </h3>
                  <p className="text-3xl font-bold mt-2">{formatPrice(plan.price)}</p>
                  <p className="text-sm text-muted-foreground mt-1">{plan.description}</p>
                </div>
                <div className="space-y-3 mb-6">
                  {plan.features.map((feature, featureIndex) => (
                    <div key={featureIndex} className="flex items-center gap-2 text-sm">
                      <Check size={14} className="text-green-500" />
                      {feature}
                    </div>
                  ))}
                </div>
                <Button className="w-full" variant={plan.id === currentPlan ? "outline" : "default"} disabled={plan.id === currentPlan} onClick={() => handleUpgradePlan(plan)}>
                  {plan.id === currentPlan ? 'Current Plan' : plan.price > currentPlanData.price ? 'Upgrade' : 'Downgrade'}
                </Button>
              </motion.div>
            ))}
          </div>
        </CardContent>
      </Card>
      <Card id="billing-history">
        <CardHeader>
          <CardTitle>Billing History</CardTitle>
          <CardDescription>Download your previous invoices and receipts</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Date</TableHead>
                <TableHead>Description</TableHead>
                <TableHead>Amount</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Action</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {invoices.map((invoice) => (
                <TableRow key={invoice.id}>
                  <TableCell>{new Date(invoice.date).toLocaleDateString()}</TableCell>
                  <TableCell>{invoice.description}</TableCell>
                  <TableCell>${invoice.amount.toFixed(2)}</TableCell>
                  <TableCell>
                    <Badge variant="outline" className={`${getStatusColor(invoice.status)} border`}>
                      {invoice.status.charAt(0).toUpperCase() + invoice.status.slice(1)}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <Button variant="ghost" size="sm" onClick={() => handleDownloadInvoice(invoice)} className="gap-1">
                      <Download size={14} /> Download
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
      <Dialog open={isUpgradeDialogOpen} onOpenChange={setIsUpgradeDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Upgrade Plan</DialogTitle>
            <DialogDescription>{selectedPlan && `Upgrade to ${selectedPlan.name} plan?`}</DialogDescription>
          </DialogHeader>
          {selectedPlan && (
            <div className="py-4">
              <div className="bg-muted/50 rounded-lg p-4 space-y-3">
                <div className="flex justify-between">
                  <span>Plan:</span><span className="font-medium">{selectedPlan.name}</span>
                </div>
                <div className="flex justify-between">
                  <span>Price:</span><span className="font-medium">{formatPrice(selectedPlan.price)}</span>
                </div>
                <div className="flex justify-between">
                  <span>Billing:</span><span className="font-medium">Monthly</span>
                </div>
              </div>
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsUpgradeDialogOpen(false)}>Cancel</Button>
            <Button onClick={handleConfirmUpgrade}><CreditCard size={16} className="mr-2" />Confirm Upgrade</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
-----
components\dashboard\Dashboard.jsx
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { ProjectsView } from './ProjectsView';
import { TeamView } from './TeamView';
import { AnalyticsView } from './AnalyticsView';
import { SettingsView } from './SettingsView';
import { PlaygroundView } from './PlaygroundView';
import { DataView } from './DataView';
// --- CORRECTED ICON IMPORTS ---
import {
  Brain,
  FolderOpen,
  Users,
  ChartBar,
  Gear,
  SignOut,
  Plus,
  Bell,
  MagnifyingGlass, // Corrected from 'Search'
  ChatCircle,
  Database,
  List
} from '@phosphor-icons/react';
import { Input } from '@/components/ui/input';
import { motion } from 'framer-motion';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator
} from '@/components/ui/dropdown-menu';
import { toast } from 'sonner';
import { useAppContext } from '../../context/AppContext';

export function Dashboard({ user, activeView, onViewChange, onLogout }) {
  const [searchQuery, setSearchQuery] = useState('');
  const [triggerNewProject, setTriggerNewProject] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [showSearchResults, setShowSearchResults] = useState(false);
  
  const {
    sidebarCollapsed,
    setSidebarCollapsed,
    projects,
    teamMembers,
    dataSources,
    playgroundMessages,
    notifications,
    setNotifications,
  } = useAppContext();

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.ctrlKey && e.key === 'b') {
        e.preventDefault();
        setSidebarCollapsed(!sidebarCollapsed);
      }
      if (e.ctrlKey && e.key === 'k') {
        e.preventDefault();
        const searchInput = document.querySelector('input[placeholder*="Search"]');
        if (searchInput) {
          searchInput.focus();
        }
      }
      if (e.key === 'Escape') {
        setShowSearchResults(false);
        setSearchQuery('');
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [sidebarCollapsed, setSidebarCollapsed]);

  const handleSearch = async (query) => {
    setSearchQuery(query);

    if (!query.trim()) {
      setShowSearchResults(false);
      return;
    }

    const results = [];

    projects.forEach((project) => {
      if (
        project.name.toLowerCase().includes(query.toLowerCase()) ||
        project.description.toLowerCase().includes(query.toLowerCase()) ||
        project.model.toLowerCase().includes(query.toLowerCase())
      ) {
        results.push({
          type: 'project',
          title: project.name,
          description: `${project.description} • ${project.status}`,
          icon: '🚀',
          action: () => {
            onViewChange('projects');
            sessionStorage.setItem('highlightProjectId', project.id);
          }
        });
      }
    });

    teamMembers.forEach((member) => {
      if (
        member.name.toLowerCase().includes(query.toLowerCase()) ||
        member.email.toLowerCase().includes(query.toLowerCase()) ||
        member.role.toLowerCase().includes(query.toLowerCase())
      ) {
        results.push({
          type: 'team',
          title: member.name,
          description: `${member.role} • ${member.email}`,
          icon: '👤',
          action: () => {
            onViewChange('team');
            sessionStorage.setItem('highlightMemberId', member.id);
          }
        });
      }
    });

    dataSources.forEach((file) => {
      if (
        file.name.toLowerCase().includes(query.toLowerCase()) ||
        file.format.toLowerCase().includes(query.toLowerCase())
      ) {
        results.push({
          type: 'data',
          title: file.name,
          description: `${file.format} • ${file.size}`,
          icon: '📄',
          action: () => {
            onViewChange('data');
            sessionStorage.setItem('highlightFileId', file.id);
          }
        });
      }
    });

    if (playgroundMessages.length > 0) {
      const hasMatchingMessage = playgroundMessages.some((message) =>
        message.content.toLowerCase().includes(query.toLowerCase())
      );

      if (hasMatchingMessage) {
        results.push({
          type: 'playground',
          title: 'Playground Chat',
          description: `${playgroundMessages.length} messages • Contains "${query}"`,
          icon: '💬',
          action: () => onViewChange('playground')
        });
      }
    }

    const settingsItems = [
      { title: 'API Keys', description: 'Manage your API credentials', section: 'api' },
      { title: 'Profile Settings', description: 'Update your account information', section: 'profile' },
      { title: 'Billing', description: 'Manage subscription and billing', section: 'billing' },
      { title: 'Usage Analytics', description: 'View API usage and analytics', section: 'analytics' },
      { title: 'Team Management', description: 'Invite and manage team members', section: 'team' },
    ];

    settingsItems.forEach(item => {
      if (
        item.title.toLowerCase().includes(query.toLowerCase()) ||
        item.description.toLowerCase().includes(query.toLowerCase())
      ) {
        results.push({
          type: 'feature',
          title: item.title,
          description: item.description,
          icon: '⚙️',
          action: () => {
            if (item.section === 'analytics' || item.section === 'team') {
              onViewChange(item.section);
            } else {
              onViewChange('settings');
            }
            sessionStorage.setItem('highlightSection', item.section);
          }
        });
      }
    });

    setSearchResults(results.slice(0, 6));
    setShowSearchResults(true);
  };

  const navigationItems = [
    { id: 'projects', label: 'Projects', icon: FolderOpen },
    { id: 'playground', label: 'Playground', icon: ChatCircle },
    { id: 'data', label: 'Knowledge Base', icon: Database },
    { id: 'team', label: 'Team', icon: Users },
    { id: 'analytics', label: 'Analytics', icon: ChartBar },
    { id: 'settings', label: 'Settings', icon: Gear }
  ];

  return (
    <div className="min-h-screen bg-background">
      <header className="border-b bg-card/50 backdrop-blur-sm sticky top-0 z-50">
        <div className="flex h-16 items-center px-6">
          <div className="flex items-center gap-3">
            <div className="flex items-center justify-center w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl border border-primary/20 shadow-sm">
              <Brain size={22} className="text-primary" weight="duotone" />
            </div>
            <h1 className="font-semibold text-lg bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent">AI Platform</h1>
          </div>
          
          <div className="flex-1 flex justify-center px-8">
            <div className="w-full max-w-lg relative">
              <div className="relative">
                <div className="absolute inset-y-0 left-0 flex items-center justify-center w-10">
                  {/* --- CORRECTED ICON COMPONENT --- */}
                  <MagnifyingGlass size={18} className="text-muted-foreground" />
                </div>
                <Input
                  placeholder="Search projects, team members... (Ctrl+K)"
                  className="pl-10 pr-4 h-10 bg-background/50 border-border/50 backdrop-blur-sm focus:bg-background focus:border-primary/50 transition-all duration-200"
                  value={searchQuery}
                  onChange={(e) => handleSearch(e.target.value)}
                  onFocus={() => searchQuery && setShowSearchResults(true)}
                  onBlur={() => setTimeout(() => setShowSearchResults(false), 200)}
                  onKeyDown={(e) => {
                    if (e.key === 'Escape') {
                      setShowSearchResults(false);
                      setSearchQuery('');
                      e.currentTarget.blur();
                    }
                  }}
                />
              </div>
              
              {showSearchResults && (
                <Card className="absolute top-full left-0 right-0 mt-2 z-50 border shadow-xl backdrop-blur-sm bg-card/95">
                  <CardContent className="p-2">
                    {searchResults.length === 0 ? (
                      <div className="p-6 text-center text-muted-foreground">
                        <div className="flex items-center justify-center w-12 h-12 mx-auto mb-3 bg-muted/50 rounded-full">
                          {/* --- CORRECTED ICON COMPONENT --- */}
                          <MagnifyingGlass size={20} />
                        </div>
                        No results found for "{searchQuery}"
                      </div>
                    ) : (
                      <>
                        <div className="px-3 py-2 text-xs font-medium text-muted-foreground border-b mb-2">
                          {searchResults.length} result{searchResults.length !== 1 ? 's' : ''} found
                        </div>
                        {searchResults.map((result, index) => (
                          <Button
                            key={index}
                            variant="ghost"
                            className="w-full justify-start h-auto p-3 mb-1 last:mb-0 hover:bg-accent/50 rounded-lg transition-colors"
                            onClick={() => {
                              result.action();
                              setShowSearchResults(false);
                              setSearchQuery('');
                              toast.success(`Navigating to ${result.title}`);
                            }}
                          >
                            <div className="flex items-start gap-3 text-left w-full">
                              <div className="flex items-center justify-center w-8 h-8 bg-accent/20 rounded-lg flex-shrink-0 mt-0.5">
                                <span className="text-lg">{result.icon}</span>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="font-medium text-sm truncate">{result.title}</p>
                                <p className="text-xs text-muted-foreground truncate mt-0.5">{result.description}</p>
                                <Badge variant="outline" className="text-xs mt-2 capitalize">
                                  {result.type}
                                </Badge>
                              </div>
                            </div>
                          </Button>
                        ))}
                      </>
                    )}
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
          
          <div className="flex items-center gap-3">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="relative h-10 w-10 rounded-lg hover:bg-accent/50 transition-colors">
                  <div className="flex items-center justify-center">
                    <Bell size={20} />
                  </div>
                  {notifications.filter(n => !n.read).length > 0 && (
                    <span className="absolute -top-1 -right-1 w-5 h-5 bg-destructive text-xs text-white rounded-full flex items-center justify-center font-medium border-2 border-background">
                      {notifications.filter(n => !n.read).length}
                    </span>
                  )}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-80">
                <div className="px-3 py-2 border-b">
                  <h4 className="font-medium">Notifications</h4>
                </div>
                {notifications.length === 0 ? (
                  <div className="p-4 text-center text-muted-foreground">No notifications</div>
                ) : (
                  notifications.map((notification) => (
                    <DropdownMenuItem
                      key={notification.id}
                      className="flex flex-col items-start p-3 cursor-pointer"
                      onClick={() => {
                        setNotifications(current =>
                          current.map(n =>
                            n.id === notification.id ? { ...n, read: true } : n
                          )
                        );
                      }}
                    >
                      <div className="flex items-start justify-between w-full">
                        <div className="flex-1">
                          <p className="font-medium text-sm">{notification.title}</p>
                          <p className="text-xs text-muted-foreground mt-1">{notification.message}</p>
                          <p className="text-xs text-muted-foreground mt-1">{new Date(notification.timestamp).toLocaleDateString()}</p>
                        </div>
                        {!notification.read && (
                          <div className="w-2 h-2 bg-primary rounded-full flex-shrink-0 mt-1"></div>
                        )}
                      </div>
                    </DropdownMenuItem>
                  ))
                )}
                {notifications.length > 0 && (
                  <>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem
                      className="justify-start"
                      onClick={() => {
                        setNotifications(current =>
                          current.map(notification => ({ ...notification, read: true }))
                        );
                        toast.success('All notifications marked as read');
                      }}
                    >
                      Mark all as read
                    </DropdownMenuItem>
                  </>
                )}
              </DropdownMenuContent>
            </DropdownMenu>
            
            <div className="flex items-center gap-3 border-l pl-4 ml-2">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" className="flex items-center gap-3 h-auto py-2 px-3 rounded-lg hover:bg-accent/50 transition-colors">
                    <div className="text-right">
                      <p className="text-sm font-medium">{user.name}</p>
                      <p className="text-xs text-muted-foreground">{user.company}</p>
                    </div>
                    <Avatar className="w-9 h-9 border-2 border-background shadow-sm">
                      <AvatarImage src={user.avatar} />
                      <AvatarFallback className="bg-primary/10 text-primary font-medium">{user.name.split(' ').map((n) => n[0]).join('')}</AvatarFallback>
                    </Avatar>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem onClick={() => onViewChange('settings')} className="flex items-center">
                    <div className="flex items-center justify-center w-4 mr-3"><Gear size={16} /></div>
                    Settings
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={onLogout} className="text-destructive flex items-center focus:text-destructive focus:bg-destructive/10">
                    <div className="flex items-center justify-center w-4 mr-3"><SignOut size={16} /></div>
                    Sign Out
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>
      </header>

      <div className="flex relative">
        <motion.nav
          className="border-r bg-gradient-to-b from-card/50 to-card/30 min-h-[calc(100vh-4rem)] overflow-hidden relative backdrop-blur-sm flex flex-col shadow-sm"
          initial={false}
          animate={{ width: sidebarCollapsed ? 80 : 256 }}
          transition={{ duration: 0.3, ease: "easeInOut" }}
        >
          {sidebarCollapsed && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.3 }}
              className="absolute inset-y-0 right-0 w-px bg-gradient-to-b from-transparent via-primary/20 to-transparent"
            />
          )}
          <div className="p-4 relative z-10 flex-1">
            <div className="space-y-1">
              {navigationItems.map((item) => {
                const Icon = item.icon;
                const isActive = activeView === item.id;
                return (
                  <motion.div
                    key={item.id}
                    whileHover={{ x: sidebarCollapsed ? 0 : 2, scale: sidebarCollapsed ? 1.05 : 1 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Button
                      variant={isActive ? "secondary" : "ghost"}
                      className={`w-full h-11 ${sidebarCollapsed ? 'justify-center px-0' : 'justify-start gap-3 px-3'} ${isActive ? 'bg-primary/10 text-primary border border-primary/20 shadow-sm' : 'hover:bg-accent/50'} transition-all duration-200 relative group`}
                      onClick={() => onViewChange(item.id)}
                      title={sidebarCollapsed ? item.label : undefined}
                    >
                      <div className={`flex items-center justify-center ${sidebarCollapsed ? 'w-5 h-5' : 'w-5 h-5 flex-shrink-0'}`}>
                        <Icon size={20} weight={isActive ? "fill" : "regular"} />
                      </div>
                      <motion.span
                        initial={false}
                        animate={{ opacity: sidebarCollapsed ? 0 : 1, width: sidebarCollapsed ? 0 : "auto" }}
                        transition={{ duration: 0.2 }}
                        className="overflow-hidden whitespace-nowrap font-medium"
                      >
                        {!sidebarCollapsed && item.label}
                      </motion.span>
                      {sidebarCollapsed && (
                        <div className="absolute left-full ml-3 px-3 py-2 bg-card border border-border rounded-lg text-sm whitespace-nowrap shadow-lg z-50 pointer-events-none backdrop-blur-sm opacity-0 group-hover:opacity-100 transition-opacity">
                          {item.label}
                        </div>
                      )}
                    </Button>
                  </motion.div>
                );
              })}
            </div>
            <motion.div
              className="mt-8 pt-6 border-t border-border/50"
              initial={false}
              animate={{ opacity: sidebarCollapsed ? 0.8 : 1 }}
              transition={{ duration: 0.2, delay: sidebarCollapsed ? 0 : 0.1 }}
            >
              {!sidebarCollapsed && (
                <motion.div initial={{ opacity: 0, scale: 0.95 }} animate={{ opacity: 1, scale: 1 }} transition={{ delay: 0.2 }}>
                  <Button
                    className="w-full gap-3 bg-gradient-to-r from-primary/10 to-primary/5 hover:from-primary/20 hover:to-primary/10 text-primary border border-primary/20 h-10 font-medium shadow-sm"
                    onClick={() => {
                      onViewChange('projects');
                      setTriggerNewProject(true);
                    }}
                  >
                    <div className="flex items-center justify-center w-5 h-5"><Plus size={18} weight="bold" /></div>
                    New Project
                  </Button>
                </motion.div>
              )}
              {sidebarCollapsed && (
                <motion.div initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} transition={{ delay: 0.2 }}>
                  <Button
                    className="w-full h-11 justify-center p-0 bg-gradient-to-r from-primary/10 to-primary/5 hover:from-primary/20 hover:to-primary/10 text-primary border border-primary/20 shadow-sm"
                    onClick={() => {
                      onViewChange('projects');
                      setTriggerNewProject(true);
                    }}
                    title="New Project"
                  >
                    <div className="flex items-center justify-center w-5 h-5"><Plus size={18} weight="bold" /></div>
                  </Button>
                </motion.div>
              )}
            </motion.div>
          </div>
          <div className="p-4 border-t border-border/50 relative z-10">
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} className="flex justify-center">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                className="h-10 w-10 p-0 bg-primary/5 hover:bg-primary/10 border border-primary/10 group rounded-lg"
                title={`${sidebarCollapsed ? "Expand" : "Collapse"} sidebar (Ctrl+B)`}
              >
                <motion.div animate={{ rotate: sidebarCollapsed ? 180 : 0 }} transition={{ duration: 0.3 }} className="flex items-center justify-center w-5 h-5">
                  <List size={20} />
                </motion.div>
              </Button>
            </motion.div>
          </div>
        </motion.nav>

        <motion.main
          className={`flex-1 ${activeView === 'playground' ? '' : 'p-6'} min-w-0`}
          initial={false}
          layout
          transition={{ duration: 0.3, ease: "easeInOut" }}
        >
          <motion.div
            key={activeView}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className="w-full"
          >
            {activeView === 'projects' && <ProjectsView user={user} triggerNewProject={triggerNewProject} onNewProjectTriggered={() => setTriggerNewProject(false)} />}
            {activeView === 'playground' && <PlaygroundView />}
            {activeView === 'data' && <DataView user={user} />}
            {activeView === 'team' && <TeamView user={user} />}
            {activeView === 'analytics' && <AnalyticsView user={user} />}
            {activeView === 'settings' && <SettingsView user={user} />}
          </motion.div>
        </motion.main>
      </div>
    </div>
  );
}
-----
components\dashboard\DataView.jsx
import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { 
  Upload, 
  FileTxt, 
  FileDoc, 
  FileCsv, 
  FilePdf,
  Link,
  Trash,
  Download,
  Eye,
  CloudArrowUp,
  CheckCircle,
  Clock,
  X,
  FileText
} from '@phosphor-icons/react';
import { toast } from 'sonner';
import { motion, AnimatePresence } from 'framer-motion';
import { useAppContext } from '../../context/AppContext';

export function DataView({ user }) {
  const { dataSources, setDataSources } = useAppContext();
  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);
  const [isTextDialogOpen, setIsTextDialogOpen] = useState(false);
  const [isUrlDialogOpen, setIsUrlDialogOpen] = useState(false);
  const [textContent, setTextContent] = useState('');
  const [urlContent, setUrlContent] = useState('');
  const [dragActive, setDragActive] = useState(false);
  const [highlightedFileId, setHighlightedFileId] = useState(null);
  const fileInputRef = useRef(null);

  useEffect(() => {
    const highlightId = sessionStorage.getItem('highlightFileId');
    if (highlightId) {
      setHighlightedFileId(highlightId);
      sessionStorage.removeItem('highlightFileId');
      
      setTimeout(() => {
        const element = document.getElementById(`file-${highlightId}`);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, 100);
      
      setTimeout(() => setHighlightedFileId(null), 3000);
    }
  }, []);

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFiles(e.dataTransfer.files);
    }
  };

  const handleFiles = (files) => {
    Array.from(files).forEach(file => {
      const allowedTypes = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain', 'text/csv'];
      if (!allowedTypes.includes(file.type)) {
        toast.error(`File type not supported: ${file.name}`);
        return;
      }

      const newDataSource = {
        id: `file_${Date.now()}_${Math.random()}`,
        name: file.name,
        type: 'file',
        format: getFileFormat(file.type),
        size: file.size,
        status: 'processing',
        uploadedAt: new Date().toISOString(),
        metadata: {}
      };

      setDataSources(current => [...current, newDataSource]);

      setTimeout(() => {
        setDataSources(current => 
          current.map(ds => 
            ds.id === newDataSource.id 
              ? {
                  ...ds,
                  status: 'ready',
                  metadata: {
                    pages: Math.floor(Math.random() * 50) + 1,
                    words: Math.floor(Math.random() * 10000) + 500,
                    characters: Math.floor(Math.random() * 50000) + 2500
                  }
                }
              : ds
          )
        );
        toast.success(`${file.name} processed successfully!`);
      }, 2000 + Math.random() * 3000);
    });
    setIsUploadDialogOpen(false);
  };

  const getFileFormat = (mimeType) => {
    switch (mimeType) {
      case 'application/pdf': return 'pdf';
      case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document': return 'docx';
      case 'text/plain': return 'txt';
      case 'text/csv': return 'csv';
      default: return 'txt';
    }
  };

  const handleAddTextContent = () => {
    if (!textContent.trim()) return;
    const newDataSource = {
      id: `text_${Date.now()}`,
      name: `Text Content ${new Date().toLocaleDateString()}`,
      type: 'text',
      format: 'text',
      size: textContent.length,
      status: 'ready',
      uploadedAt: new Date().toISOString(),
      content: textContent,
      metadata: {
        words: textContent.split(/\s+/).length,
        characters: textContent.length
      }
    };
    setDataSources(current => [...current, newDataSource]);
    setTextContent('');
    setIsTextDialogOpen(false);
    toast.success('Text content added successfully!');
  };

  const handleAddUrlContent = async () => {
    if (!urlContent.trim()) return;
    const newDataSource = {
      id: `url_${Date.now()}`,
      name: `Web Content: ${urlContent}`,
      type: 'url',
      format: 'webpage',
      size: 0,
      status: 'processing',
      uploadedAt: new Date().toISOString(),
      url: urlContent,
      metadata: {}
    };
    setDataSources(current => [...current, newDataSource]);
    setUrlContent('');
    setIsUrlDialogOpen(false);

    setTimeout(() => {
      setDataSources(current => 
        current.map(ds => 
          ds.id === newDataSource.id 
            ? {
                ...ds,
                status: 'ready',
                size: Math.floor(Math.random() * 100000) + 10000,
                metadata: {
                  words: Math.floor(Math.random() * 5000) + 1000,
                  characters: Math.floor(Math.random() * 25000) + 5000
                }
              }
            : ds
        )
      );
      toast.success('URL content scraped successfully!');
    }, 3000 + Math.random() * 2000);
  };

  const handleDeleteDataSource = (id) => {
    setDataSources(current => current.filter(ds => ds.id !== id));
    toast.success('Data source deleted');
  };

  const getFileIcon = (format) => {
    switch (format) {
      case 'pdf': return <FilePdf size={20} className="text-red-500" />;
      case 'docx': return <FileDoc size={20} className="text-blue-500" />;
      case 'txt': case 'text': return <FileTxt size={20} className="text-gray-500" />;
      case 'csv': return <FileCsv size={20} className="text-green-500" />;
      case 'webpage': return <Link size={20} className="text-purple-500" />;
      default: return <FileText size={20} className="text-gray-500" />;
    }
  };

  const getStatusConfig = (status) => {
    switch (status) {
      case 'processing': return { label: 'Processing', color: 'bg-yellow-100 text-yellow-800 border-yellow-200', icon: Clock };
      case 'ready': return { label: 'Ready', color: 'bg-green-100 text-green-800 border-green-200', icon: CheckCircle };
      case 'error': return { label: 'Error', color: 'bg-red-100 text-red-800 border-red-200', icon: X };
    }
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Knowledge Base</h2>
          <p className="text-muted-foreground">Upload and manage data sources for your AI models</p>
        </div>
        <div className="flex gap-2">
          <Dialog open={isTextDialogOpen} onOpenChange={setIsTextDialogOpen}>
            <DialogTrigger asChild><Button variant="outline" className="gap-2"><FileTxt size={16} />Add Text</Button></DialogTrigger>
            <DialogContent className="sm:max-w-lg">
              <DialogHeader>
                <DialogTitle>Add Text Content</DialogTitle>
                <DialogDescription>Paste or type text content directly</DialogDescription>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div className="space-y-2">
                  <Label htmlFor="text-content">Content</Label>
                  <Textarea id="text-content" placeholder="Paste your content here..." value={textContent} onChange={(e) => setTextContent(e.target.value)} className="min-h-[200px] resize-none" />
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setIsTextDialogOpen(false)}>Cancel</Button>
                <Button onClick={handleAddTextContent} disabled={!textContent.trim()}>Add Content</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
          <Dialog open={isUrlDialogOpen} onOpenChange={setIsUrlDialogOpen}>
            <DialogTrigger asChild><Button variant="outline" className="gap-2"><Link size={16} />Scrape URL</Button></DialogTrigger>
            <DialogContent className="sm:max-w-lg">
              <DialogHeader>
                <DialogTitle>Scrape Website Content</DialogTitle>
                <DialogDescription>Enter a URL to scrape content from a webpage</DialogDescription>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div className="space-y-2">
                  <Label htmlFor="url-content">Website URL</Label>
                  <Input id="url-content" placeholder="https://example.com" value={urlContent} onChange={(e) => setUrlContent(e.target.value)} />
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setIsUrlDialogOpen(false)}>Cancel</Button>
                <Button onClick={handleAddUrlContent} disabled={!urlContent.trim()}>Scrape Content</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
          <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>
            <DialogTrigger asChild><Button className="gap-2"><Upload size={16} />Upload Files</Button></DialogTrigger>
            <DialogContent className="sm:max-w-lg">
              <DialogHeader>
                <DialogTitle>Upload Files</DialogTitle>
                <DialogDescription>Upload documents in PDF, DOCX, TXT, or CSV format</DialogDescription>
              </DialogHeader>
              <div className="py-6">
                <div
                  className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${dragActive ? 'border-primary bg-primary/5' : 'border-muted-foreground/25 hover:border-muted-foreground/50'}`}
                  onDragEnter={handleDrag} onDragLeave={handleDrag} onDragOver={handleDrag} onDrop={handleDrop}
                >
                  <CloudArrowUp size={48} className="mx-auto mb-4 text-muted-foreground" />
                  <p className="text-lg font-medium mb-2">Drop files here or click to browse</p>
                  <p className="text-sm text-muted-foreground mb-4">Supports PDF, DOCX, TXT, and CSV files up to 50MB</p>
                  <Button variant="outline" onClick={() => fileInputRef.current?.click()}>Choose Files</Button>
                  <input ref={fileInputRef} type="file" multiple accept=".pdf,.docx,.txt,.csv" onChange={(e) => e.target.files && handleFiles(e.target.files)} className="hidden" />
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setIsUploadDialogOpen(false)}>Close</Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Sources</p>
                <p className="text-2xl font-bold">{dataSources.length}</p>
              </div>
              <FileText size={24} className="text-primary" weight="duotone" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Ready</p>
                <p className="text-2xl font-bold text-green-600">{dataSources.filter(ds => ds.status === 'ready').length}</p>
              </div>
              <CheckCircle size={24} className="text-green-600" weight="duotone" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Processing</p>
                <p className="text-2xl font-bold text-yellow-600">{dataSources.filter(ds => ds.status === 'processing').length}</p>
              </div>
              <Clock size={24} className="text-yellow-600" weight="duotone" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Size</p>
                <p className="text-2xl font-bold">{formatFileSize(dataSources.reduce((acc, ds) => acc + ds.size, 0))}</p>
              </div>
              <Upload size={24} className="text-primary" weight="duotone" />
            </div>
          </CardContent>
        </Card>
      </div>
      {dataSources.length === 0 ? (
        <Card className="p-12 text-center">
          <div className="flex flex-col items-center gap-4">
            <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center"><Upload size={32} className="text-muted-foreground" /></div>
            <div>
              <h3 className="font-semibold text-lg">No data sources yet</h3>
              <p className="text-muted-foreground">Upload files or add content to get started</p>
            </div>
            <Button onClick={() => setIsUploadDialogOpen(true)} className="gap-2"><Upload size={16} />Upload Your First File</Button>
          </div>
        </Card>
      ) : (
        <Card>
          <CardHeader>
            <CardTitle>Data Sources</CardTitle>
            <CardDescription>Manage your uploaded files and content</CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Name</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Size</TableHead>
                  <TableHead>Uploaded</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                <AnimatePresence>
                  {dataSources.map((dataSource) => {
                    const statusConfig = getStatusConfig(dataSource.status);
                    const StatusIcon = statusConfig.icon;
                    return (
                      <motion.tr
                        key={dataSource.id}
                        id={`file-${dataSource.id}`}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -20 }}
                        transition={{ duration: 0.3 }}
                        className={`${highlightedFileId === dataSource.id ? 'bg-primary/10 animate-pulse border-l-4 border-l-primary' : ''}`}
                      >
                        <TableCell>
                          <div className="flex items-center gap-3">
                            {getFileIcon(dataSource.format)}
                            <div>
                              <p className="font-medium">{dataSource.name}</p>
                              {dataSource.metadata.words && <p className="text-xs text-muted-foreground">{dataSource.metadata.words.toLocaleString()} words</p>}
                            </div>
                          </div>
                        </TableCell>
                        <TableCell><Badge variant="outline">{dataSource.format.toUpperCase()}</Badge></TableCell>
                        <TableCell><Badge variant="outline" className={`${statusConfig.color} border`}><StatusIcon size={12} className="mr-1" />{statusConfig.label}</Badge></TableCell>
                        <TableCell>{formatFileSize(dataSource.size)}</TableCell>
                        <TableCell>{new Date(dataSource.uploadedAt).toLocaleDateString()}</TableCell>
                        <TableCell>
                          <div className="flex gap-1">
                            <Button variant="ghost" size="sm"><Eye size={14} /></Button>
                            <Button variant="ghost" size="sm"><Download size={14} /></Button>
                            <Button variant="ghost" size="sm" onClick={() => handleDeleteDataSource(dataSource.id)} className="text-destructive hover:text-destructive"><Trash size={14} /></Button>
                          </div>
                        </TableCell>
                      </motion.tr>
                    );
                  })}
                </AnimatePresence>
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
-----
components\dashboard\PlaygroundView.jsx
import { useState, useRef, useEffect, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { Label } from '@/components/ui/label';
import { Slider } from '@/components/ui/slider';
import {
  PaperPlaneTilt,
  Stop,
  Robot,
  User,
  Trash,
  Copy,
  Download,
  Gear,
  Lightning,
  ChatCircle,
  Timer,
  Sparkle,
  ArrowLeft
} from '@phosphor-icons/react';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'sonner';
import { ConversationTemplates } from './playground/ConversationTemplates';
import { useAppContext } from '../../context/AppContext';

export function PlaygroundView() {
  // Extract and normalize messages as an array
  const { messages: rawMessages, setMessages } = useAppContext();
  const messages = Array.isArray(rawMessages) ? rawMessages : [];
  
  const [currentMessage, setCurrentMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [abortController, setAbortController] = useState(null);
  const [showTemplates, setShowTemplates] = useState(false);
  const [activeTemplate, setActiveTemplate] = useState(null);
  const [modelConfig, setModelConfig] = useState({
    model: 'gpt-4o',
    temperature: 0.7,
    maxTokens: 2048,
    systemPrompt: 'You are a helpful AI assistant.'
  });
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const sampleConversations = Array.isArray(activeTemplate?.sampleConversations)
    ? activeTemplate.sampleConversations
    : [];
  const tags = Array.isArray(activeTemplate?.tags)
    ? activeTemplate.tags
    : [];
  const defaultStarters = [
    "Hello! How can you help me today?",
    "What are your capabilities?",
    "Can you help me with code review?",
    "Explain quantum computing in simple terms"
  ];

  const conversationStarters = useMemo(() => {
    const validStarters = sampleConversations
      .filter(conv => conv && typeof conv.user === 'string' && conv.user.trim())
      .map(conv => conv.user);
    return validStarters.length > 0 ? validStarters : defaultStarters;
  }, [sampleConversations]);

  const hasSampleConversations =
    sampleConversations.length > 0 &&
    sampleConversations.some(conv => conv && typeof conv.user === 'string' && conv.user.trim());

  const sendMessage = async () => {
    if (!currentMessage.trim() || isTyping) return;
    const userMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: currentMessage.trim(),
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMessage]);
    setCurrentMessage('');
    setIsTyping(true);
    const controller = new AbortController();
    setAbortController(controller);
    const startTime = Date.now();
    setTimeout(() => {
      if (controller.signal.aborted) {
        setIsTyping(false);
        setAbortController(null);
        return;
      }
      const duration = Date.now() - startTime;
      const mockResponse = `This is a simulated AI response based on your system prompt: "${modelConfig.systemPrompt}". You asked: "${userMessage.content}".`;
      const assistantMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: mockResponse,
        timestamp: new Date(),
        tokens: Math.ceil(mockResponse.length / 4),
        duration
      };
      setMessages(prev => [...prev, assistantMessage]);
      setIsTyping(false);
      setAbortController(null);
    }, 1500);
  };

  const stopGeneration = () => {
    if (abortController) {
      abortController.abort();
      setIsTyping(false);
      setAbortController(null);
      toast.info('Generation stopped.');
    }
  };

  const clearConversation = () => {
    setMessages([]);
    toast.success('Conversation cleared');
  };

  const exportConversation = () => {
    const exportData = { messages, config: modelConfig, timestamp: new Date().toISOString() };
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `playground-conversation-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success('Conversation exported');
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const formatDuration = (ms) => (ms < 1000 ? `${ms}ms` : `${(ms / 1000).toFixed(1)}s`);

  const handleTemplateSelect = (template) => {
    setActiveTemplate(template);
    setModelConfig(prev => ({ ...prev, systemPrompt: template.systemPrompt }));
    setShowTemplates(false);
    toast.success(`Applied "${template.name}" template`);
  };

  const startConversation = (message) => {
    setCurrentMessage(message);
    inputRef.current?.focus();
  };

  const resetTemplate = () => {
    setActiveTemplate(null);
    setModelConfig(prev => ({ ...prev, systemPrompt: 'You are a helpful AI assistant.' }));
    setMessages([]);
    toast.success('Reset to default assistant');
  };

  const startWithSampleConversation = () => {
    if (hasSampleConversations) {
      const sample = sampleConversations.find(
        conv => conv && typeof conv.user === 'string' && conv.user.trim()
      );
      if (sample) {
        setCurrentMessage(sample.user);
        inputRef.current?.focus();
      }
    }
  };

  if (showTemplates) {
    return (
      <div className="flex-1 max-w-7xl mx-auto p-6">
        <ConversationTemplates
          onSelectTemplate={handleTemplateSelect}
          onClose={() => setShowTemplates(false)}
        />
      </div>
    );
  }

  return (
    <div className="flex-1 max-w-7xl mx-auto p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <div className="flex items-center gap-3">
            <h1 className="text-3xl font-bold tracking-tight">AI Playground</h1>
            {activeTemplate && (
              <div className="flex items-center gap-2">
                <Separator orientation="vertical" className="h-6" />
                <Badge variant="secondary" className="flex items-center gap-1">
                  {activeTemplate.icon}
                  {activeTemplate.name}
                </Badge>
              </div>
            )}
          </div>
          <p className="text-muted-foreground mt-1">
            {activeTemplate ? `Testing ${activeTemplate.name} - ${activeTemplate.description}` : "Test and experiment with your AI models in real-time"}
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" size="sm" onClick={() => setShowTemplates(true)} className="flex items-center gap-2">
            <Sparkle size={16} /> Templates
          </Button>
          {activeTemplate && (
            <Button variant="outline" size="sm" onClick={resetTemplate}>
              <ArrowLeft size={16} className="mr-2" /> Reset
            </Button>
          )}
          <Button variant="outline" size="sm" onClick={exportConversation}>
            <Download size={16} className="mr-2" />Export
          </Button>
          <Button variant="outline" size="sm" onClick={clearConversation}>
            <Trash size={16} className="mr-2" />Clear
          </Button>
        </div>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 h-[calc(100vh-12rem)]">
        <Card className="lg:col-span-1 h-fit">
          <CardHeader className="pb-4">
            <CardTitle className="text-lg flex items-center gap-2">
              <Gear size={20} />Configuration
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="model">Model</Label>
              <Select value={modelConfig.model} onValueChange={(value) => setModelConfig(prev => ({ ...prev, model: value }))}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  <SelectItem value="gpt-4o">GPT-4o</SelectItem>
                  <SelectItem value="gpt-4o-mini">GPT-4o Mini</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label htmlFor="temperature">Temperature: {modelConfig.temperature}</Label>
              <Slider value={[modelConfig.temperature]} onValueChange={([value]) => setModelConfig(prev => ({ ...prev, temperature: value }))} max={2} min={0} step={0.1} />
              <div className="flex justify-between text-xs text-muted-foreground"><span>Conservative</span><span>Creative</span></div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="maxTokens">Max Tokens: {modelConfig.maxTokens}</Label>
              <Slider value={[modelConfig.maxTokens]} onValueChange={([value]) => setModelConfig(prev => ({ ...prev, maxTokens: value }))} max={4096} min={1} step={1} />
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="systemPrompt">System Prompt</Label>
                {activeTemplate && <Badge variant="outline" className="text-xs">Template Active</Badge>}
              </div>
              <Textarea
                placeholder="Enter system prompt..."
                value={modelConfig.systemPrompt}
                onChange={(e) => setModelConfig(prev => ({ ...prev, systemPrompt: e.target.value }))}
                className="min-h-[100px] resize-none"
                disabled={!!activeTemplate}
              />
              {activeTemplate && <p className="text-xs text-muted-foreground">System prompt is managed by the active template.</p>}
            </div>
            {activeTemplate && (
              <div className="pt-4 border-t space-y-3">
                <div className="flex items-center gap-2">{activeTemplate.icon}<Label className="text-sm font-medium">{activeTemplate.name}</Label></div>
                <p className="text-xs text-muted-foreground">{activeTemplate.description}</p>
                <div className="flex flex-wrap gap-1">{tags.slice(0, 3).map(tag => (<Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>))}</div>
                {hasSampleConversations && (
                  <Button variant="outline" size="sm" onClick={startWithSampleConversation} className="w-full text-xs">
                    Try Sample Conversation
                  </Button>
                )}
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="lg:col-span-3 flex flex-col">
          <CardHeader className="pb-4">
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg flex items-center gap-2">
                <ChatCircle size={20} />Conversation
              </CardTitle>
              <div className="flex items-center gap-3">
                <Badge variant="secondary" className="gap-1"><Lightning size={12} />{messages.length} messages</Badge>
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="text-xs text-muted-foreground">Ready</span>
                </div>
              </div>
            </div>
          </CardHeader>
          <CardContent className="flex-1 flex flex-col p-0">
            <ScrollArea className="flex-1 px-6">
              <div className="space-y-4 pb-4">
                {messages.length === 0 ? (
                  <div className="flex items-center justify-center h-full text-center">
                    <div className="space-y-6 max-w-md">
                      <div className="mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center">
                        {activeTemplate ? activeTemplate.icon : <Robot size={24} className="text-primary" />}
                      </div>
                      <div>
                        <p className="text-lg font-medium">{activeTemplate ? `Start chatting with ${activeTemplate.name}` : 'Start a conversation'}</p>
                        <p className="text-sm text-muted-foreground mb-4">
                          {activeTemplate ? `Try one of these starters for ${activeTemplate.name}` : "Type a message or try a starter below"}
                        </p>
                      </div>
                      <div className="grid grid-cols-1 gap-2">
                        {conversationStarters.map((starter, index) => (
                          <Button key={index} variant="outline" className="text-left justify-start h-auto p-3 whitespace-normal" onClick={() => startConversation(starter)}>
                            {starter}
                          </Button>
                        ))}
                      </div>
                      {!activeTemplate && (
                        <div className="pt-4 border-t">
                          <Button onClick={() => setShowTemplates(true)} className="flex items-center gap-2">
                            <Sparkle size={16} />Browse AI Assistant Templates
                          </Button>
                        </div>
                      )}
                    </div>
                  </div>
                ) : (
                  <AnimatePresence>
                    {messages.map((message) => (
                      <motion.div key={message.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}
                        className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                        {message.type === 'assistant' && (
                          <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                            {activeTemplate
                              ? (<div className="text-primary [&>svg]:w-4 [&>svg]:h-4">{activeTemplate.icon}</div>)
                              : (<Robot size={16} className="text-primary" />)
                            }
                          </div>
                        )}
                        <div className={`max-w-[70%] ${message.type === 'user' ? 'order-1' : ''}`}>
                          <div className={`rounded-2xl px-4 py-3 ${message.type === 'user' ? 'bg-primary text-primary-foreground ml-auto' : 'bg-muted'}`}>
                            <p className="whitespace-pre-wrap">{message.content}</p>
                          </div>
                          <div className={`flex items-center gap-2 mt-1 text-xs text-muted-foreground ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                            <span>{new Date(message.timestamp).toLocaleTimeString()}</span>
                            {message.tokens && (<><span>•</span><span>{message.tokens} tokens</span></>)}
                            {message.duration && (<><span>•</span><span className="flex items-center gap-1"><Timer size={10} />{formatDuration(message.duration)}</span></>)}
                            <Button variant="ghost" size="sm" className="h-auto p-1" onClick={() => { navigator.clipboard.writeText(message.content); toast.success('Message copied'); }}>
                              <Copy size={10} />
                            </Button>
                          </div>
                        </div>
                        {message.type === 'user' && (
                          <div className="w-8 h-8 bg-secondary rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                            <User size={16} className="text-secondary-foreground" />
                          </div>
                        )}
                      </motion.div>
                    ))}
                  </AnimatePresence>
                )}
                <AnimatePresence>
                  {isTyping && (
                    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -20 }} className="flex gap-3">
                      <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0">
                        {activeTemplate
                          ? (<div className="text-primary [&>svg]:w-4 [&>svg]:h-4">{activeTemplate.icon}</div>)
                          : (<Robot size={16} className="text-primary" />)
                        }
                      </div>
                      <div className="bg-muted rounded-2xl px-4 py-3">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-muted-foreground/50 rounded-full animate-bounce [animation-delay:-0.3s]"></div>
                          <div className="w-2 h-2 bg-muted-foreground/50 rounded-full animate-bounce [animation-delay:-0.15s]"></div>
                          <div className="w-2 h-2 bg-muted-foreground/50 rounded-full animate-bounce"></div>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>
            <div className="border-t p-4">
              <div className="flex gap-3">
                <div className="flex-1">
                  <Textarea
                    ref={inputRef}
                    placeholder="Type your message..."
                    value={currentMessage}
                    onChange={(e) => setCurrentMessage(e.target.value)}
                    onKeyDown={handleKeyPress}
                    className="min-h-[60px] max-h-32 resize-none"
                    disabled={isTyping}
                  />
                </div>
                <Button onClick={isTyping ? stopGeneration : sendMessage}
                  disabled={!isTyping && !currentMessage.trim()}
                  size="lg"
                  className="self-end"
                  variant={isTyping ? "destructive" : "default"}
                >
                  {isTyping ? <Stop size={18} /> : <PaperPlaneTilt size={18} />}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

-----
components\dashboard\ProjectsView.jsx
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { 
  Plus, 
  Rocket, 
  Clock, 
  CheckCircle, 
  Code, 
  Brain,
  DotsThree,
  Trash,
  PencilSimple
} from '@phosphor-icons/react';
import { toast } from 'sonner';
import { motion } from 'framer-motion';
import { useAppContext } from '../../context/AppContext';

export function ProjectsView({ user, triggerNewProject, onNewProjectTriggered }) {
  const { projects, setProjects } = useAppContext();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeployDialogOpen, setIsDeployDialogOpen] = useState(false);
  const [selectedProject, setSelectedProject] = useState(null);
  const [highlightedProjectId, setHighlightedProjectId] = useState(null);
  const [newProjectForm, setNewProjectForm] = useState({
    name: '',
    description: '',
    model: 'gpt-4o'
  });

  // Handle trigger from sidebar button
  useEffect(() => {
    if (triggerNewProject) {
      setIsCreateDialogOpen(true);
      onNewProjectTriggered?.();
    }
  }, [triggerNewProject, onNewProjectTriggered]);

  // Handle highlighting from search navigation
  useEffect(() => {
    const highlightId = sessionStorage.getItem('highlightProjectId');
    if (highlightId) {
      setHighlightedProjectId(highlightId);
      sessionStorage.removeItem('highlightProjectId');
      
      setTimeout(() => {
        const element = document.getElementById(`project-${highlightId}`);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, 100);
      
      setTimeout(() => {
        setHighlightedProjectId(null);
      }, 3000);
    }
  }, []);

  const handleCreateProject = () => {
    if (!newProjectForm.name.trim()) {
        toast.error("Project name is required.");
        return;
    };

    const project = {
      id: `proj_${Date.now()}`,
      name: newProjectForm.name,
      description: newProjectForm.description,
      status: 'development',
      model: newProjectForm.model,
      version: '1.0.0',
      createdAt: new Date().toISOString(),
      lastUpdated: new Date().toISOString(),
      apiCalls: 0
    };

    setProjects(current => [...current, project]);
    setNewProjectForm({ name: '', description: '', model: 'gpt-4o' });
    setIsCreateDialogOpen(false);
    toast.success('Project created successfully!');
  };

  const handleDeleteProject = (projectId) => {
    setProjects(current => current.filter(p => p.id !== projectId));
    toast.success('Project deleted');
  };

  const handleEditProject = (project) => {
    setSelectedProject(project);
    setNewProjectForm({
      name: project.name,
      description: project.description,
      model: project.model
    });
    setIsEditDialogOpen(true);
  };

  const handleUpdateProject = () => {
    if (!selectedProject || !newProjectForm.name.trim()) return;

    setProjects(current => current.map(p => 
      p.id === selectedProject.id 
        ? {
            ...p,
            name: newProjectForm.name,
            description: newProjectForm.description,
            model: newProjectForm.model,
            lastUpdated: new Date().toISOString()
          }
        : p
    ));
    
    setIsEditDialogOpen(false);
    setSelectedProject(null);
    setNewProjectForm({ name: '', description: '', model: 'gpt-4o' });
    toast.success('Project updated successfully!');
  };

  const handleDeployProject = (project) => {
    setSelectedProject(project);
    setIsDeployDialogOpen(true);
  };

  const handleConfirmDeploy = () => {
    if (!selectedProject) return;

    setProjects(current => current.map(p => 
      p.id === selectedProject.id 
        ? {
            ...p,
            status: 'deployed',
            lastUpdated: new Date().toISOString()
          }
        : p
    ));
    
    setIsDeployDialogOpen(false);
    setSelectedProject(null);
    toast.success('Project deployed successfully!');
  };

  const handleViewAPI = (project) => {
    const apiEndpoint = `https://api.aiplatform.com/v1/projects/${project.id}/chat`;
    navigator.clipboard.writeText(apiEndpoint);
    toast.success('API endpoint copied to clipboard!');
  };

  const getStatusConfig = (status) => {
    switch (status) {
      case 'development':
        return { label: 'In Development', color: 'bg-yellow-100 text-yellow-800 border-yellow-200', icon: Code };
      case 'testing':
        return { label: 'Testing', color: 'bg-blue-100 text-blue-800 border-blue-200', icon: Clock };
      case 'deployed':
        return { label: 'Deployed', color: 'bg-green-100 text-green-800 border-green-200', icon: CheckCircle };
      default:
        return { label: 'Unknown', color: 'bg-gray-100 text-gray-800 border-gray-200', icon: Code };
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Projects</h2>
          <p className="text-muted-foreground">Manage your AI models and deployments</p>
        </div>
        
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button className="gap-2">
              <Plus size={16} />
              New Project
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-lg">
            <DialogHeader>
              <DialogTitle>Create New Project</DialogTitle>
              <DialogDescription>Start building your custom AI assistant</DialogDescription>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="project-name">Project Name</Label>
                <Input
                  id="project-name"
                  placeholder="Customer Support Bot"
                  value={newProjectForm.name}
                  onChange={(e) => setNewProjectForm(prev => ({ ...prev, name: e.target.value }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="project-description">Description</Label>
                <Textarea
                  id="project-description"
                  placeholder="Intelligent customer support assistant for handling inquiries..."
                  value={newProjectForm.description}
                  onChange={(e) => setNewProjectForm(prev => ({ ...prev, description: e.target.value }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="base-model">Base Model</Label>
                <Select value={newProjectForm.model} onValueChange={(value) => setNewProjectForm(prev => ({ ...prev, model: value }))}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="gpt-4o">GPT-4O (Recommended)</SelectItem>
                    <SelectItem value="gpt-4o-mini">GPT-4O Mini</SelectItem>
                    <SelectItem value="claude-3">Claude 3</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>Cancel</Button>
              <Button onClick={handleCreateProject}>Create Project</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
          <DialogContent className="sm:max-w-lg">
            <DialogHeader>
              <DialogTitle>Edit Project</DialogTitle>
              <DialogDescription>Update your project settings</DialogDescription>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="edit-project-name">Project Name</Label>
                <Input
                  id="edit-project-name"
                  value={newProjectForm.name}
                  onChange={(e) => setNewProjectForm(prev => ({ ...prev, name: e.target.value }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="edit-project-description">Description</Label>
                <Textarea
                  id="edit-project-description"
                  value={newProjectForm.description}
                  onChange={(e) => setNewProjectForm(prev => ({ ...prev, description: e.target.value }))}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="edit-base-model">Base Model</Label>
                <Select value={newProjectForm.model} onValueChange={(value) => setNewProjectForm(prev => ({ ...prev, model: value }))}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="gpt-4o">GPT-4O (Recommended)</SelectItem>
                    <SelectItem value="gpt-4o-mini">GPT-4O Mini</SelectItem>
                    <SelectItem value="claude-3">Claude 3</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>Cancel</Button>
              <Button onClick={handleUpdateProject}>Update Project</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        <Dialog open={isDeployDialogOpen} onOpenChange={setIsDeployDialogOpen}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>Deploy Project</DialogTitle>
              <DialogDescription>Deploy "{selectedProject?.name}" to production?</DialogDescription>
            </DialogHeader>
            <div className="py-4">
              <div className="bg-muted/50 rounded-lg p-4 space-y-2">
                <p className="text-sm font-medium">Deployment includes:</p>
                <ul className="text-sm text-muted-foreground space-y-1">
                  <li>• Live API endpoint generation</li>
                  <li>• Automatic scaling configuration</li>
                  <li>• Performance monitoring setup</li>
                  <li>• Security and rate limiting</li>
                </ul>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsDeployDialogOpen(false)}>Cancel</Button>
              <Button onClick={handleConfirmDeploy}><Rocket size={16} className="mr-2" />Deploy Now</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Projects</p>
                <p className="text-2xl font-bold">{projects.length}</p>
              </div>
              <Brain size={24} className="text-primary" weight="duotone" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Deployed</p>
                <p className="text-2xl font-bold text-green-600">{projects.filter(p => p.status === 'deployed').length}</p>
              </div>
              <Rocket size={24} className="text-green-600" weight="duotone" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">In Development</p>
                <p className="text-2xl font-bold text-yellow-600">{projects.filter(p => p.status === 'development').length}</p>
              </div>
              <Code size={24} className="text-yellow-600" weight="duotone" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">API Calls Today</p>
                <p className="text-2xl font-bold">{projects.reduce((acc, p) => acc + p.apiCalls, 0).toLocaleString()}</p>
              </div>
              <CheckCircle size={24} className="text-primary" weight="duotone" />
            </div>
          </CardContent>
        </Card>
      </div>

      {projects.length === 0 ? (
        <Card className="p-12 text-center">
          <div className="flex flex-col items-center gap-4">
            <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center"><Brain size={32} className="text-muted-foreground" /></div>
            <div>
              <h3 className="font-semibold text-lg">No projects yet</h3>
              <p className="text-muted-foreground">Create your first AI project to get started</p>
            </div>
            <Button onClick={() => setIsCreateDialogOpen(true)} className="gap-2"><Plus size={16} />Create Project</Button>
          </div>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {projects.map((project, index) => {
            const statusConfig = getStatusConfig(project.status);
            const StatusIcon = statusConfig.icon;
            return (
              <motion.div
                key={project.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
              >
                <Card 
                  id={`project-${project.id}`}
                  className={`group hover:shadow-lg transition-all duration-300 hover:-translate-y-1 ${highlightedProjectId === project.id ? 'ring-2 ring-primary/50 bg-primary/5 animate-pulse' : ''}`}
                >
                  <CardHeader className="pb-3">
                    <div className="flex items-start justify-between">
                      <div className="space-y-1">
                        <CardTitle className="text-lg">{project.name}</CardTitle>
                        <CardDescription className="text-sm">{project.description || 'No description provided'}</CardDescription>
                      </div>
                      <Button variant="ghost" size="sm" className="opacity-0 group-hover:opacity-100 transition-opacity"><DotsThree size={16} /></Button>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center gap-2">
                      <Badge variant="outline" className={`${statusConfig.color} border`}><StatusIcon size={12} className="mr-1" />{statusConfig.label}</Badge>
                      <Badge variant="secondary" className="text-xs">v{project.version}</Badge>
                    </div>
                    <div className="text-sm text-muted-foreground space-y-1">
                      <p>Model: {project.model}</p>
                      <p>Created: {new Date(project.createdAt).toLocaleDateString()}</p>
                      <p>API Calls: {project.apiCalls.toLocaleString()}</p>
                    </div>
                    <div className="flex gap-2 pt-2">
                      <Button variant="outline" size="sm" className="flex-1 gap-1" onClick={() => handleEditProject(project)}><PencilSimple size={14} />Edit</Button>
                      {project.status === 'deployed' ? (
                        <Button size="sm" className="flex-1 gap-1" onClick={() => handleViewAPI(project)}><Rocket size={14} />View API</Button>
                      ) : (
                        <Button size="sm" className="flex-1 gap-1" onClick={() => handleDeployProject(project)}><Rocket size={14} />Deploy</Button>
                      )}
                      <Button variant="outline" size="sm" onClick={() => handleDeleteProject(project.id)} className="text-destructive hover:text-destructive"><Trash size={14} /></Button>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            );
          })}
        </div>
      )}
    </div>
  );
}
-----
components\dashboard\SettingsView.jsx
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { BillingView } from './BillingView';
import { 
  User, 
  Bell, 
  Shield, 
  CreditCard, 
  Key,
  Lock,
  Copy,
  Eye,
  EyeSlash
} from '@phosphor-icons/react';
import { toast } from 'sonner';
import { motion } from 'framer-motion';
import { useAppContext } from '../../context/AppContext';

export function SettingsView({ user }) {
  const { settings, setSettings, apiKeys, setApiKeys } = useAppContext();
  
  const [profile, setProfile] = useState({
    name: user.name,
    email: user.email,
    company: user.company,
    bio: ''
  });

  const [showApiKey, setShowApiKey] = useState(null);
  const [activeTab, setActiveTab] = useState('profile');

  useEffect(() => {
    const highlight = sessionStorage.getItem('highlightSection');
    if (highlight) {
      setActiveTab(highlight);
      sessionStorage.removeItem('highlightSection');
    }
  }, []);

  const handleSaveProfile = () => {
    // Here you would typically also update the global user state
    // For now, just a toast message
    toast.success('Profile updated successfully');
  };

  const handleUpdateSetting = (category, setting, value) => {
    setSettings(current => ({
      ...current,
      [category]: {
        ...current[category],
        [setting]: value
      }
    }));
    toast.success('Settings updated');
  };

  const copyApiKey = (key) => {
    navigator.clipboard.writeText(key);
    toast.success('API key copied to clipboard');
  };

  const handleChangePassword = () => {
    toast.info('Change password flow initiated.');
  };

  const handleGenerateApiKey = () => {
    const newKey = {
        id: `key_${Date.now()}`,
        name: 'New API Key',
        key: `sk-proj-${Math.random().toString(36).substring(2, 11)}...${Math.random().toString(36).substring(2, 8)}`,
        created: new Date().toISOString(),
        lastUsed: new Date().toISOString(),
        usage: 0
    };
    setApiKeys(current => [...current, newKey]);
    toast.success('New API key generated!');
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-3xl font-bold tracking-tight">Settings</h2>
        <p className="text-muted-foreground">Manage your account preferences and security settings</p>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="profile" className="gap-2"><User size={16} />Profile</TabsTrigger>
          <TabsTrigger value="notifications" className="gap-2"><Bell size={16} />Notifications</TabsTrigger>
          <TabsTrigger value="security" className="gap-2"><Shield size={16} />Security</TabsTrigger>
          <TabsTrigger value="api" className="gap-2"><Key size={16} />API Keys</TabsTrigger>
          <TabsTrigger value="billing" className="gap-2"><CreditCard size={16} />Billing</TabsTrigger>
        </TabsList>

        <TabsContent value="profile" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Profile Information</CardTitle>
              <CardDescription>Update your account profile and preferences</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center gap-6">
                <Avatar className="w-20 h-20">
                  <AvatarImage src={user.avatar} />
                  <AvatarFallback className="text-lg">{user.name.split(' ').map((n) => n[0]).join('')}</AvatarFallback>
                </Avatar>
                <div>
                  <Button variant="outline" size="sm">Change Avatar</Button>
                  <p className="text-sm text-muted-foreground mt-2">JPG, PNG or GIF. Max size 2MB.</p>
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Full Name</Label>
                  <Input id="name" value={profile.name} onChange={(e) => setProfile(prev => ({ ...prev, name: e.target.value }))} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input id="email" type="email" value={profile.email} onChange={(e) => setProfile(prev => ({ ...prev, email: e.target.value }))} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="company">Company</Label>
                  <Input id="company" value={profile.company} onChange={(e) => setProfile(prev => ({ ...prev, company: e.target.value }))} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="role">Role</Label>
                  <Select value={user.role} disabled>
                    <SelectTrigger><SelectValue /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Admin">Admin</SelectItem>
                      <SelectItem value="Developer">Developer</SelectItem>
                      <SelectItem value="Editor">Editor</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="bio">Bio</Label>
                <Textarea id="bio" placeholder="Tell us about yourself..." value={profile.bio} onChange={(e) => setProfile(prev => ({ ...prev, bio: e.target.value }))} />
              </div>
              <Button onClick={handleSaveProfile}>Save Changes</Button>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="notifications" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Notification Preferences</CardTitle>
              <CardDescription>Choose how you want to be notified about updates</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Email Notifications</p>
                  <p className="text-sm text-muted-foreground">Receive notifications via email</p>
                </div>
                <Switch checked={settings.notifications.email} onCheckedChange={(checked) => handleUpdateSetting('notifications', 'email', checked)} />
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Browser Notifications</p>
                  <p className="text-sm text-muted-foreground">Show desktop notifications</p>
                </div>
                <Switch checked={settings.notifications.browser} onCheckedChange={(checked) => handleUpdateSetting('notifications', 'browser', checked)} />
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Weekly Reports</p>
                  <p className="text-sm text-muted-foreground">Get weekly usage summaries</p>
                </div>
                <Switch checked={settings.notifications.weekly} onCheckedChange={(checked) => handleUpdateSetting('notifications', 'weekly', checked)} />
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Marketing Updates</p>
                  <p className="text-sm text-muted-foreground">Product updates and feature announcements</p>
                </div>
                <Switch checked={settings.notifications.marketing} onCheckedChange={(checked) => handleUpdateSetting('notifications', 'marketing', checked)} />
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="security" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Security Settings</CardTitle>
              <CardDescription>Manage your account security and access</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="font-medium">Two-Factor Authentication</p>
                  <p className="text-sm text-muted-foreground">Add an extra layer of security to your account</p>
                </div>
                <div className="flex items-center gap-3">
                  <Badge variant={settings.security.twoFactor ? 'default' : 'secondary'}>{settings.security.twoFactor ? 'Enabled' : 'Disabled'}</Badge>
                  <Switch checked={settings.security.twoFactor} onCheckedChange={(checked) => handleUpdateSetting('security', 'twoFactor', checked)} />
                </div>
              </div>
              <div className="space-y-2">
                <Label>Session Timeout</Label>
                <Select value={settings.security.sessionTimeout} onValueChange={(value) => handleUpdateSetting('security', 'sessionTimeout', value)}>
                  <SelectTrigger className="w-full"><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="1h">1 hour</SelectItem>
                    <SelectItem value="8h">8 hours</SelectItem>
                    <SelectItem value="24h">24 hours</SelectItem>
                    <SelectItem value="7d">7 days</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="pt-4 border-t">
                <Button variant="outline" className="gap-2" onClick={handleChangePassword}><Lock size={16} />Change Password</Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="api" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>API Keys</CardTitle>
              <CardDescription>Manage your API keys for accessing the platform</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-4">
                {apiKeys.map((apiKey) => (
                  <motion.div key={apiKey.id} className="border rounded-lg p-4" whileHover={{ scale: 1.02 }} transition={{ duration: 0.2 }}>
                    <div className="flex items-center justify-between">
                      <div className="space-y-1">
                        <p className="font-medium">{apiKey.name}</p>
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <span>Created: {new Date(apiKey.created).toLocaleDateString()}</span>
                          <span>•</span>
                          <span>Last used: {new Date(apiKey.lastUsed).toLocaleDateString()}</span>
                          <span>•</span>
                          <span>{apiKey.usage.toLocaleString()} calls</span>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button variant="ghost" size="sm" onClick={() => setShowApiKey(showApiKey === apiKey.id ? null : apiKey.id)}>
                          {showApiKey === apiKey.id ? <EyeSlash size={16} /> : <Eye size={16} />}
                        </Button>
                        <Button variant="ghost" size="sm" onClick={() => copyApiKey(apiKey.key)}><Copy size={16} /></Button>
                      </div>
                    </div>
                    <div className="mt-3">
                      <code className="text-sm bg-muted px-2 py-1 rounded font-mono">
                        {showApiKey === apiKey.id ? apiKey.key : '••••••••••••••••••••••••••••••••'}
                      </code>
                    </div>
                  </motion.div>
                ))}
              </div>
              <Button className="gap-2" onClick={handleGenerateApiKey}><Key size={16} />Generate New API Key</Button>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="billing" className="space-y-4">
          <BillingView user={user} />
        </TabsContent>
      </Tabs>
    </div>
  );
}
-----
components\dashboard\TeamView.jsx
import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  UserPlus, 
  Crown, 
  Shield, 
  PencilSimple,
  Envelope,
  CalendarBlank,
  Trash,
  Gear,
  ChartLine,
  Users,
  Lock
} from '@phosphor-icons/react';
import { toast } from 'sonner';
import { motion } from 'framer-motion';
import { PermissionsMatrix } from './team/PermissionsMatrix';
import { InvitationManager } from './team/InvitationManager';
import { TeamActivity } from './team/TeamActivity';
import { TeamSettings } from './team/TeamSettings';
import { useAppContext } from '../../context/AppContext';

export function TeamView({ user }) {
  const { teamMembers, setTeamMembers } = useAppContext();
  
  const [highlightedMemberId, setHighlightedMemberId] = useState(null);
  const [activityLog, setActivityLog] = useState([]); // Local state for activity
  const [rolePermissions, setRolePermissions] = useState({
    Admin: {
      'projects.view': true, 'projects.create': true, 'projects.edit': true, 'projects.delete': true, 'projects.deploy': true,
      'team.view': true, 'team.invite': true, 'team.manage': true,
      'data.view': true, 'data.upload': true, 'data.delete': true, 'data.export': true,
      'deployment.view': true, 'deployment.manage': true,
      'billing.view': true, 'billing.manage': true
    },
    Developer: {
      'projects.view': true, 'projects.create': true, 'projects.edit': true, 'projects.delete': false, 'projects.deploy': true,
      'team.view': true, 'team.invite': false, 'team.manage': false,
      'data.view': true, 'data.upload': true, 'data.delete': false, 'data.export': true,
      'deployment.view': true, 'deployment.manage': true,
      'billing.view': false, 'billing.manage': false
    },
    Editor: {
      'projects.view': true, 'projects.create': false, 'projects.edit': true, 'projects.delete': false, 'projects.deploy': false,
      'team.view': true, 'team.invite': false, 'team.manage': false,
      'data.view': true, 'data.upload': true, 'data.delete': false, 'data.export': false,
      'deployment.view': true, 'deployment.manage': false,
      'billing.view': false, 'billing.manage': false
    }
  });
  
  const [isInviteDialogOpen, setIsInviteDialogOpen] = useState(false);
  const [inviteForm, setInviteForm] = useState({ email: '', role: 'Editor' });
  const [activeTab, setActiveTab] = useState('overview');

  useEffect(() => {
    const highlightId = sessionStorage.getItem('highlightMemberId');
    if (highlightId) {
      setActiveTab('overview'); // Ensure the overview tab is active
      setHighlightedMemberId(highlightId);
      sessionStorage.removeItem('highlightMemberId');
      
      setTimeout(() => {
        const element = document.getElementById(`member-${highlightId}`);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, 100);
      
      setTimeout(() => setHighlightedMemberId(null), 3000);
    }
  }, []);

  const logActivity = (action, details, type = 'info') => {
    const newActivity = {
      id: `activity_${Date.now()}`,
      userId: user.id,
      action,
      details,
      timestamp: new Date().toISOString(),
      type
    };
    setActivityLog(current => [newActivity, ...current.slice(0, 49)]);
  };

  const handleInviteMember = () => {
    if (!inviteForm.email.trim()) {
        toast.error("Email address cannot be empty.");
        return;
    }

    const newMember = {
      id: `member_${Date.now()}`,
      name: inviteForm.email.split('@')[0],
      email: inviteForm.email,
      role: inviteForm.role,
      status: 'pending',
      joinedAt: new Date().toISOString(),
      lastActive: new Date().toISOString(),
      avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${inviteForm.email}`,
      activityScore: 0,
      permissions: Object.keys(rolePermissions[inviteForm.role]).filter(key => rolePermissions[inviteForm.role][key])
    };

    setTeamMembers(current => [...current, newMember]);
    logActivity('Invited Member', `Invited ${inviteForm.email} as ${inviteForm.role}`, 'success');
    setInviteForm({ email: '', role: 'Editor' });
    setIsInviteDialogOpen(false);
    toast.success('Invitation sent successfully!');
  };

  const handleRemoveMember = (memberId) => {
    const member = teamMembers.find(m => m.id === memberId);
    if (member) {
      setTeamMembers(current => current.filter(m => m.id !== memberId));
      logActivity('Removed Member', `Removed ${member.name} from the team`, 'warning');
      toast.success('Team member removed');
    }
  };

  const handleRoleChange = (memberId, newRole) => {
    const member = teamMembers.find(m => m.id === memberId);
    if (member) {
      setTeamMembers(current => 
        current.map(m => 
          m.id === memberId 
            ? { ...m, role: newRole, permissions: Object.keys(rolePermissions[newRole]).filter(key => rolePermissions[newRole][key]) } 
            : m
        )
      );
      logActivity('Updated Role', `Changed ${member.name}'s role to ${newRole}`, 'info');
      toast.success('Role updated successfully');
    }
  };

  const handlePermissionChange = (role, permission, enabled) => {
    const updatedRolePermissions = {
      ...rolePermissions,
      [role]: {
        ...rolePermissions[role],
        [permission]: enabled
      }
    };
    setRolePermissions(updatedRolePermissions);
    
    setTeamMembers(current => 
      current.map(member => 
        member.role === role 
          ? { ...member, permissions: Object.keys(updatedRolePermissions[role]).filter(key => updatedRolePermissions[role][key]) }
          : member
      )
    );
    
    logActivity('Updated Permissions', `Modified ${role} permissions for: ${permission}`, 'info');
    toast.success('Permissions updated');
  };

  const handleInvitationAccepted = (invitation) => {
    setTeamMembers(current => 
      current.map(member => 
        member.email === invitation.email 
          ? { ...member, status: 'active', activityScore: Math.floor(Math.random() * 40) + 20 }
          : member
      )
    );
    logActivity('Member Joined', `${invitation.email} accepted the invitation`, 'success');
  };

  const getRoleConfig = (role) => {
    switch (role) {
      case 'Admin': return { color: 'bg-red-100 text-red-800 border-red-200', icon: Crown };
      case 'Developer': return { color: 'bg-blue-100 text-blue-800 border-blue-200', icon: Shield };
      case 'Editor': return { color: 'bg-green-100 text-green-800 border-green-200', icon: PencilSimple };
      default: return { color: 'bg-gray-100 text-gray-800 border-gray-200', icon: Users };
    }
  };

  const getStatusConfig = (status) => {
    switch (status) {
      case 'active': return { label: 'Active', color: 'bg-green-100 text-green-800' };
      case 'pending': return { label: 'Pending', color: 'bg-yellow-100 text-yellow-800' };
      case 'inactive': return { label: 'Inactive', color: 'bg-gray-100 text-gray-800' };
      default: return { label: 'Unknown', color: 'bg-gray-100 text-gray-800' };
    }
  };
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Team Collaboration</h2>
          <p className="text-muted-foreground">Manage members, permissions, and collaboration settings</p>
        </div>
        
        <Dialog open={isInviteDialogOpen} onOpenChange={setIsInviteDialogOpen}>
          <DialogTrigger asChild><Button className="gap-2"><UserPlus size={16} />Invite Member</Button></DialogTrigger>
          <DialogContent className="sm:max-w-lg">
            <DialogHeader>
              <DialogTitle>Invite Team Member</DialogTitle>
              <DialogDescription>Send an invitation to join your AI platform team</DialogDescription>
            </DialogHeader>
            <motion.div className="space-y-4 py-4" initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}>
              <div className="space-y-2">
                <Label htmlFor="invite-email">Email Address</Label>
                <div className="relative">
                  <Envelope size={16} className="absolute left-3 top-3 text-muted-foreground" />
                  <Input id="invite-email" type="email" placeholder="colleague@company.com" className="pl-10" value={inviteForm.email} onChange={(e) => setInviteForm(prev => ({ ...prev, email: e.target.value }))} />
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="invite-role">Role</Label>
                <Select value={inviteForm.role} onValueChange={(value) => setInviteForm(prev => ({ ...prev, role: value }))}>
                  <SelectTrigger><SelectValue /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Admin"><div className="flex items-center gap-2"><Crown size={14} />Admin - Full access</div></SelectItem>
                    <SelectItem value="Developer"><div className="flex items-center gap-2"><Shield size={14} />Developer - Create & deploy</div></SelectItem>
                    <SelectItem value="Editor"><div className="flex items-center gap-2"><PencilSimple size={14} />Editor - Edit projects</div></SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </motion.div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsInviteDialogOpen(false)}>Cancel</Button>
              <Button onClick={handleInviteMember}>Send Invitation</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview" className="flex items-center gap-2"><Users size={16} /><span className="hidden sm:inline">Overview</span></TabsTrigger>
          <TabsTrigger value="invitations" className="flex items-center gap-2"><Envelope size={16} /><span className="hidden sm:inline">Invitations</span></TabsTrigger>
          <TabsTrigger value="permissions" className="flex items-center gap-2"><Lock size={16} /><span className="hidden sm:inline">Permissions</span></TabsTrigger>
          <TabsTrigger value="activity" className="flex items-center gap-2"><ChartLine size={16} /><span className="hidden sm:inline">Activity</span></TabsTrigger>
          <TabsTrigger value="settings" className="flex items-center gap-2"><Gear size={16} /><span className="hidden sm:inline">Settings</span></TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card><CardContent className="p-6"><div className="flex items-center justify-between"><div><p className="text-sm font-medium text-muted-foreground">Total Members</p><p className="text-2xl font-bold">{teamMembers.length}</p></div><UserPlus size={24} className="text-primary" weight="duotone" /></div></CardContent></Card>
            <Card><CardContent className="p-6"><div className="flex items-center justify-between"><div><p className="text-sm font-medium text-muted-foreground">Active</p><p className="text-2xl font-bold text-green-600">{teamMembers.filter(m => m.status === 'active').length}</p></div><Shield size={24} className="text-green-600" weight="duotone" /></div></CardContent></Card>
            <Card><CardContent className="p-6"><div className="flex items-center justify-between"><div><p className="text-sm font-medium text-muted-foreground">Pending</p><p className="text-2xl font-bold text-yellow-600">{teamMembers.filter(m => m.status === 'pending').length}</p></div><CalendarBlank size={24} className="text-yellow-600" weight="duotone" /></div></CardContent></Card>
            <Card><CardContent className="p-6"><div className="flex items-center justify-between"><div><p className="text-sm font-medium text-muted-foreground">Admins</p><p className="text-2xl font-bold text-red-600">{teamMembers.filter(m => m.role === 'Admin').length}</p></div><Crown size={24} className="text-red-600" weight="duotone" /></div></CardContent></Card>
          </div>
          <Card>
            <CardHeader>
              <CardTitle>Team Members</CardTitle>
              <CardDescription>Manage team member roles and permissions</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Member</TableHead>
                    <TableHead>Role</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Activity</TableHead>
                    <TableHead>Joined</TableHead>
                    <TableHead>Last Active</TableHead>
                    <TableHead className="w-[100px]">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {teamMembers.map((member) => {
                    const roleConfig = getRoleConfig(member.role);
                    const statusConfig = getStatusConfig(member.status);
                    const RoleIcon = roleConfig.icon;
                    return (
                      <TableRow key={member.id} id={`member-${member.id}`} className={`${highlightedMemberId === member.id ? 'bg-primary/10 animate-pulse border-l-4 border-l-primary' : ''}`}>
                        <TableCell>
                          <div className="flex items-center gap-3">
                            <Avatar className="w-8 h-8"><AvatarImage src={member.avatar} /><AvatarFallback>{member.name.split(' ').map(n => n[0]).join('')}</AvatarFallback></Avatar>
                            <div><p className="font-medium">{member.name}</p><p className="text-sm text-muted-foreground">{member.email}</p></div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <Select value={member.role} onValueChange={(value) => handleRoleChange(member.id, value)} disabled={member.id === user.id}>
                            <SelectTrigger className="w-[140px]"><Badge variant="outline" className={`${roleConfig.color} border-0`}><RoleIcon size={12} className="mr-1" />{member.role}</Badge></SelectTrigger>
                            <SelectContent><SelectItem value="Admin">Admin</SelectItem><SelectItem value="Developer">Developer</SelectItem><SelectItem value="Editor">Editor</SelectItem></SelectContent>
                          </Select>
                        </TableCell>
                        <TableCell><Badge variant="outline" className={statusConfig.color}>{statusConfig.label}</Badge></TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            <div className="w-16 bg-gray-200 rounded-full h-2"><div className="bg-primary h-2 rounded-full" style={{ width: `${member.activityScore}%` }} /></div>
                            <span className="text-sm text-muted-foreground">{member.activityScore}%</span>
                          </div>
                        </TableCell>
                        <TableCell className="text-sm text-muted-foreground">{new Date(member.joinedAt).toLocaleDateString()}</TableCell>
                        <TableCell className="text-sm text-muted-foreground">{member.status === 'active' ? new Date(member.lastActive).toLocaleDateString() : 'Never'}</TableCell>
                        <TableCell>{member.id !== user.id && (<Button variant="ghost" size="sm" onClick={() => handleRemoveMember(member.id)} className="text-destructive hover:text-destructive"><Trash size={14} /></Button>)}</TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="invitations">
          <InvitationManager currentUser={user} onInvitationAccepted={handleInvitationAccepted} initialInvitations={teamMembers.filter(m => m.status === 'pending')} />
        </TabsContent>
        <TabsContent value="permissions">
          <PermissionsMatrix rolePermissions={rolePermissions} onPermissionChange={handlePermissionChange} />
        </TabsContent>
        <TabsContent value="activity">
          <TeamActivity teamMembers={teamMembers} activityLog={activityLog} />
        </TabsContent>
        <TabsContent value="settings">
          <TeamSettings rolePermissions={rolePermissions} onRolePermissionsChange={setRolePermissions} />
        </TabsContent>
      </Tabs>
    </div>
  );
}
-----
components\dashboard\playground\ConversationTemplates.jsx
// src/components/dashboard/playground/ConversationTemplates.jsx

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { 
  Headphones,
  Code,
  GraduationCap,
  Briefcase,
  Lightbulb,
  Heart,
  MagnifyingGlass,
  Star,
  X,
  ArrowRight,
  ChatCircle,
  Users
} from '@phosphor-icons/react';
import { motion, AnimatePresence } from 'framer-motion';

const templates = [
  {
    id: 'customer-support',
    name: 'Customer Support Bot',
    description: 'Helpful assistant for handling customer inquiries and support tickets',
    category: 'Support',
    icon: <Headphones size={20} />,
    systemPrompt: `You are a friendly and professional customer support assistant. Your goal is to help customers resolve their issues quickly and efficiently. Always:\n\n1. Greet customers warmly and acknowledge their concern\n2. Ask clarifying questions to understand the issue better\n3. Provide step-by-step solutions when possible\n4. Be patient and empathetic\n5. Escalate to human agents when necessary\n6. Follow up to ensure the issue is resolved\n\nKeep responses concise but thorough. If you cannot solve an issue, explain what steps the customer should take next.`,
    tags: ['support', 'customer-service', 'troubleshooting', 'help-desk'],
    sampleConversations: [
      { user: "My order hasn't arrived yet.", assistant: "I apologize for the delay. Could you please provide your order number so I can check its status?" },
    ],
    features: ['24/7 availability', 'Escalation handling', 'Issue tracking'],
    complexity: 'Simple',
    popularity: 95
  },
  {
    id: 'coding-assistant',
    name: 'Code Review Assistant',
    description: 'Expert assistant for code review, debugging, and best practices',
    category: 'Technical',
    icon: <Code size={20} />,
    systemPrompt: `You are an expert programming assistant specializing in code review and debugging. Analyze code for bugs, performance issues, and security vulnerabilities. Suggest improvements for readability and maintainability. Provide refactored code examples when helpful.`,
    tags: ['programming', 'code-review', 'debugging', 'development'],
    sampleConversations: [
      { user: "Can you review this Python function?", assistant: "Of course. Please paste the function here, and I'll provide a detailed review focusing on best practices and potential improvements." },
    ],
    features: ['Multi-language support', 'Security analysis', 'Performance optimization'],
    complexity: 'Advanced',
    popularity: 88
  },
  // Add more templates as needed
];

const categories = Array.from(new Set(templates.map(t => t.category)));

export function ConversationTemplates({ onSelectTemplate, onClose }) {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [selectedTemplate, setSelectedTemplate] = useState(null);

  const filteredTemplates = templates.filter(template => {
    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesCategory = selectedCategory === 'All' || template.category === selectedCategory;
    return matchesSearch && matchesCategory;
  }).sort((a, b) => b.popularity - a.popularity);

  if (selectedTemplate) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4">
          <Button variant="outline" onClick={() => setSelectedTemplate(null)}>
            <ArrowRight size={16} className="rotate-180 mr-2" />
            Back to Templates
          </Button>
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">{selectedTemplate.icon}</div>
            <div>
              <h2 className="text-2xl font-bold">{selectedTemplate.name}</h2>
              <p className="text-muted-foreground">{selectedTemplate.description}</p>
            </div>
          </div>
          <div className="ml-auto">
            <Button onClick={() => onSelectTemplate(selectedTemplate)} size="lg">Use This Template</Button>
          </div>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <Card className="lg:col-span-2">
            <CardHeader><CardTitle>Template Details</CardTitle></CardHeader>
            <CardContent className="space-y-6">
              <div>
                <h4 className="font-semibold mb-2">System Prompt</h4>
                <div className="bg-muted rounded-lg p-4 text-sm"><pre className="whitespace-pre-wrap font-mono">{selectedTemplate.systemPrompt}</pre></div>
              </div>
              <div>
                <h4 className="font-semibold mb-2">Sample Conversations</h4>
                <div className="space-y-4">
                  {selectedTemplate.sampleConversations.map((conv, i) => (
                    <div key={i} className="border rounded-lg p-4 space-y-3">
                      <div className="flex gap-3"><div className="w-6 h-6 bg-secondary rounded-full flex items-center justify-center flex-shrink-0"><Users size={12} /></div><div className="bg-primary text-primary-foreground rounded-lg px-3 py-2 max-w-[80%]">{conv.user}</div></div>
                      <div className="flex gap-3"><div className="w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0">{selectedTemplate.icon}</div><div className="bg-muted rounded-lg px-3 py-2 max-w-[80%]">{conv.assistant}</div></div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
          <div className="space-y-4">
            <Card>
              <CardHeader><CardTitle className="text-lg">Template Info</CardTitle></CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h5 className="font-medium text-sm mb-2">Category</h5>
                  <Badge variant="outline">{selectedTemplate.category}</Badge>
                </div>
                <div>
                  <h5 className="font-medium text-sm mb-2">Complexity</h5>
                  <Badge variant={selectedTemplate.complexity === 'Simple' ? 'secondary' : selectedTemplate.complexity === 'Intermediate' ? 'default' : 'destructive'}>{selectedTemplate.complexity}</Badge>
                </div>
                <div>
                  <h5 className="font-medium text-sm mb-2">Popularity</h5>
                  <div className="flex items-center gap-2">
                    <div className="flex">{Array.from({ length: 5 }).map((_, i) => (<Star key={i} size={16} className={i < Math.floor(selectedTemplate.popularity / 20) ? 'text-yellow-500 fill-current' : 'text-gray-300'} />))}</div>
                    <span className="text-sm text-muted-foreground">{selectedTemplate.popularity}%</span>
                  </div>
                </div>
                <div>
                  <h5 className="font-medium text-sm mb-2">Tags</h5>
                  <div className="flex flex-wrap gap-1">{selectedTemplate.tags.map(tag => (<Badge key={tag} variant="outline" className="text-xs">{tag}</Badge>))}</div>
                </div>
                <div>
                  <h5 className="font-medium text-sm mb-2">Features</h5>
                  <ul className="space-y-1 text-sm text-muted-foreground">{selectedTemplate.features.map(feature => (<li key={feature} className="flex items-center gap-2"><div className="w-1 h-1 bg-primary rounded-full"></div>{feature}</li>))}</ul>
                </div>
              </CardContent>
            </Card>
            <Button onClick={() => onSelectTemplate(selectedTemplate)} className="w-full" size="lg">Start Using Template</Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">AI Assistant Templates</h1>
          <p className="text-muted-foreground">Choose from pre-built AI assistants optimized for specific use cases</p>
        </div>
        <Button variant="outline" onClick={onClose}><X size={16} className="mr-2" />Close</Button>
      </div>
      <div className="flex gap-4">
        <div className="flex-1 relative">
          <MagnifyingGlass size={16} className="absolute left-3 top-3 text-muted-foreground" />
          <Input placeholder="Search templates..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10" />
        </div>
        <div className="flex gap-2">
          <Button variant={selectedCategory === 'All' ? 'default' : 'outline'} onClick={() => setSelectedCategory('All')} size="sm">All</Button>
          {categories.map(category => (
            <Button key={category} variant={selectedCategory === category ? 'default' : 'outline'} onClick={() => setSelectedCategory(category)} size="sm">{category}</Button>
          ))}
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <AnimatePresence>
          {filteredTemplates.map((template) => (
            <motion.div key={template.id} initial={{ opacity: 0, scale: 0.95 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.95 }} whileHover={{ scale: 1.02 }} transition={{ duration: 0.2 }}>
              <Card className="h-full cursor-pointer hover:shadow-lg transition-shadow" onClick={() => setSelectedTemplate(template)}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">{template.icon}</div>
                      <div>
                        <CardTitle className="text-lg">{template.name}</CardTitle>
                        <Badge variant="outline" className="text-xs">{template.category}</Badge>
                      </div>
                    </div>
                    <div className="flex items-center gap-1"><Star size={14} className="text-yellow-500 fill-current" /><span className="text-xs text-muted-foreground">{template.popularity}%</span></div>
                  </div>
                  <CardDescription>{template.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex flex-wrap gap-1">
                      {template.tags.slice(0, 3).map(tag => (<Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>))}
                      {template.tags.length > 3 && <Badge variant="secondary" className="text-xs">+{template.tags.length - 3} more</Badge>}
                    </div>
                    <div className="flex items-center justify-between">
                      <Badge variant={template.complexity === 'Simple' ? 'secondary' : template.complexity === 'Intermediate' ? 'default' : 'destructive'} className="text-xs">{template.complexity}</Badge>
                      <div className="text-xs text-muted-foreground">{template.features.length} features</div>
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm" onClick={(e) => { e.stopPropagation(); setSelectedTemplate(template); }} className="flex-1">View Details</Button>
                      <Button size="sm" onClick={(e) => { e.stopPropagation(); onSelectTemplate(template); }} className="flex-1">Use Template</Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </AnimatePresence>
      </div>
      {filteredTemplates.length === 0 && (
        <div className="text-center py-12">
          <ChatCircle size={48} className="mx-auto mb-4 text-muted-foreground opacity-50" />
          <h3 className="text-lg font-medium mb-2">No templates found</h3>
          <p className="text-muted-foreground">Try adjusting your search terms or category filter</p>
        </div>
      )}
    </div>
  );
}
-----
components\dashboard\team\InvitationManager.jsx
import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Envelope, Clock, Check, X, Copy, Eye, Trash } from '@phosphor-icons/react';
import { toast } from 'sonner';
import { motion } from 'framer-motion';

export function InvitationManager({ currentUser, onInvitationAccepted, initialInvitations = [] }) {
  const [invitations, setInvitations] = useState(initialInvitations);
  const [isViewingInvites, setIsViewingInvites] = useState(false);

  useEffect(() => {
    const updatedInvitations = invitations.map(inv => {
      const now = new Date();
      const expiryDate = new Date(inv.expiresAt);
      if (inv.status === 'pending' && now > expiryDate) {
        return { ...inv, status: 'expired' };
      }
      return inv;
    });
    setInvitations(updatedInvitations);
  }, []); // Run only once on mount to check for expired invites

  const pendingInvitations = invitations.filter(inv => inv.status === 'pending');

  const copyInviteLink = (invitation) => {
    const inviteUrl = `${window.location.origin}/invite/${invitation.inviteToken}`;
    navigator.clipboard.writeText(inviteUrl);
    toast.success('Invite link copied to clipboard');
  };

  const resendInvitation = (invitationId) => {
    setInvitations(current =>
      current.map(inv =>
        inv.id === invitationId
          ? {
              ...inv,
              invitedAt: new Date().toISOString(),
              expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
              status: 'pending'
            }
          : inv
      )
    );
    toast.success('Invitation resent');
  };

  const cancelInvitation = (invitationId) => {
    setInvitations(current =>
      current.map(inv =>
        inv.id === invitationId ? { ...inv, status: 'cancelled' } : inv
      )
    );
    toast.success('Invitation cancelled');
  };

  const getStatusConfig = (status) => {
    switch (status) {
      case 'pending': return { label: 'Pending', color: 'bg-yellow-100 text-yellow-800' };
      case 'accepted': return { label: 'Accepted', color: 'bg-green-100 text-green-800' };
      case 'expired': return { label: 'Expired', color: 'bg-red-100 text-red-800' };
      case 'cancelled': return { label: 'Cancelled', color: 'bg-gray-100 text-gray-800' };
      default: return { label: 'Unknown', color: 'bg-gray-100 text-gray-800' };
    }
  };

  const getRoleColor = (role) => {
    switch (role) {
      case 'Admin': return 'bg-red-100 text-red-800';
      case 'Developer': return 'bg-blue-100 text-blue-800';
      case 'Editor': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getDaysUntilExpiry = (expiresAt) => {
    const now = new Date();
    const expiry = new Date(expiresAt);
    const diffTime = expiry.getTime() - now.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  };
  
  const expiredCount = invitations.filter(inv => inv.status === 'expired').length;
  const acceptedCount = invitations.filter(inv => inv.status === 'accepted').length;

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Pending Invites</p>
                <p className="text-2xl font-bold text-yellow-600">{pendingInvitations.length}</p>
              </div>
              <Clock size={20} className="text-yellow-600" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Expired</p>
                <p className="text-2xl font-bold text-red-600">{expiredCount}</p>
              </div>
              <X size={20} className="text-red-600" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Accepted</p>
                <p className="text-2xl font-bold text-green-600">{acceptedCount}</p>
              </div>
              <Check size={20} className="text-green-600" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle>Team Invitations</CardTitle>
            <CardDescription>Manage pending and sent invitations</CardDescription>
          </div>
          <Dialog open={isViewingInvites} onOpenChange={setIsViewingInvites}>
            <DialogTrigger asChild>
              <Button variant="outline" size="sm">
                <Eye size={16} className="mr-2" />
                View All
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>All Invitations</DialogTitle>
                <DialogDescription>Complete history of team invitations</DialogDescription>
              </DialogHeader>
              <div className="space-y-4 py-4">
                {invitations.length === 0 ? (
                  <div className="text-center py-8 text-muted-foreground">No invitations sent yet</div>
                ) : (
                  invitations.map((invitation) => {
                    const statusConfig = getStatusConfig(invitation.status);
                    const daysUntilExpiry = getDaysUntilExpiry(invitation.expiresAt);
                    return (
                      <motion.div
                        key={invitation.id}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="border rounded-lg p-4 space-y-3"
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <Avatar className="w-8 h-8">
                              <AvatarImage src={`https://api.dicebear.com/7.x/avataaars/svg?seed=${invitation.email}`} />
                              <AvatarFallback>{invitation.email.charAt(0).toUpperCase()}</AvatarFallback>
                            </Avatar>
                            <div>
                              <p className="font-medium">{invitation.email}</p>
                              <p className="text-sm text-muted-foreground">Invited by {invitation.invitedBy}</p>
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            <Badge variant="outline" className={getRoleColor(invitation.role)}>{invitation.role}</Badge>
                            <Badge variant="outline" className={statusConfig.color}>{statusConfig.label}</Badge>
                          </div>
                        </div>
                        <div className="flex items-center justify-between text-sm text-muted-foreground">
                          <span>Sent {new Date(invitation.invitedAt).toLocaleDateString()}</span>
                          {invitation.status === 'pending' && (
                            <span className={daysUntilExpiry <= 1 ? 'text-red-600' : ''}>
                              {daysUntilExpiry > 0 ? `Expires in ${daysUntilExpiry} days` : 'Expired'}
                            </span>
                          )}
                        </div>
                        {invitation.status === 'pending' && (
                          <div className="flex items-center gap-2 pt-2 border-t">
                            <Button size="sm" variant="outline" onClick={() => copyInviteLink(invitation)}>
                              <Copy size={14} className="mr-1" />
                              Copy Link
                            </Button>
                            <Button size="sm" variant="outline" onClick={() => resendInvitation(invitation.id)}>
                              <Envelope size={14} className="mr-1" />
                              Resend
                            </Button>
                            <Button size="sm" variant="outline" onClick={() => cancelInvitation(invitation.id)} className="text-destructive hover:text-destructive">
                              <Trash size={14} className="mr-1" />
                              Cancel
                            </Button>
                          </div>
                        )}
                      </motion.div>
                    );
                  })
                )}
              </div>
            </DialogContent>
          </Dialog>
        </CardHeader>
        <CardContent>
          {pendingInvitations.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">No pending invitations</div>
          ) : (
            <div className="space-y-4">
              {pendingInvitations.slice(0, 3).map((invitation) => {
                const daysUntilExpiry = getDaysUntilExpiry(invitation.expiresAt);
                return (
                  <div key={invitation.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center gap-3">
                      <Avatar className="w-8 h-8">
                        <AvatarImage src={`https://api.dicebear.com/7.x/avataaars/svg?seed=${invitation.email}`} />
                        <AvatarFallback>{invitation.email.charAt(0).toUpperCase()}</AvatarFallback>
                      </Avatar>
                      <div>
                        <p className="font-medium">{invitation.email}</p>
                        <p className="text-sm text-muted-foreground">{invitation.role} • Expires in {daysUntilExpiry} days</p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button size="sm" variant="outline" onClick={() => copyInviteLink(invitation)}>
                        <Copy size={14} />
                      </Button>
                      <Button size="sm" variant="outline" onClick={() => resendInvitation(invitation.id)}>
                        <Envelope size={14} />
                      </Button>
                    </div>
                  </div>
                );
              })}
              {pendingInvitations.length > 3 && (
                <Button variant="ghost" className="w-full" onClick={() => setIsViewingInvites(true)}>
                  View {pendingInvitations.length - 3} more invitations
                </Button>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
-----
components\dashboard\team\PermissionsMatrix.jsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Shield, Crown, PencilSimple, Eye, Plus, Rocket, DownloadSimple, Trash, Users, CreditCard } from '@phosphor-icons/react';

const permissions = [
  { id: 'projects.view', name: 'View Projects', description: 'Can view project details', icon: Eye, category: 'Projects' },
  { id: 'projects.create', name: 'Create Projects', description: 'Can create new projects', icon: Plus, category: 'Projects' },
  { id: 'projects.edit', name: 'Edit Projects', description: 'Can modify project settings', icon: PencilSimple, category: 'Projects' },
  { id: 'projects.delete', name: 'Delete Projects', description: 'Can delete projects', icon: Trash, category: 'Projects' },
  { id: 'projects.deploy', name: 'Deploy Projects', description: 'Can deploy projects to production', icon: Rocket, category: 'Projects' },
  { id: 'team.view', name: 'View Team', description: 'Can view team members', icon: Users, category: 'Team' },
  { id: 'team.invite', name: 'Invite Members', description: 'Can send team invitations', icon: Plus, category: 'Team' },
  { id: 'team.manage', name: 'Manage Members', description: 'Can modify member roles and remove members', icon: Shield, category: 'Team' },
  { id: 'data.view', name: 'View Data', description: 'Can view uploaded data sources', icon: Eye, category: 'Data' },
  { id: 'data.upload', name: 'Upload Data', description: 'Can upload new data sources', icon: Plus, category: 'Data' },
  { id: 'data.delete', name: 'Delete Data', description: 'Can delete data sources', icon: Trash, category: 'Data' },
  { id: 'data.export', name: 'Export Data', description: 'Can export data sources', icon: DownloadSimple, category: 'Data' },
  { id: 'deployment.view', name: 'View Deployments', description: 'Can view deployment status', icon: Eye, category: 'Deployment' },
  { id: 'deployment.manage', name: 'Manage Deployments', description: 'Can start/stop deployments', icon: Rocket, category: 'Deployment' },
  { id: 'billing.view', name: 'View Billing', description: 'Can view billing information', icon: Eye, category: 'Billing' },
  { id: 'billing.manage', name: 'Manage Billing', description: 'Can modify billing and subscriptions', icon: CreditCard, category: 'Billing' },
];

const roleColors = {
  Admin: 'bg-red-100 text-red-800 border-red-200',
  Developer: 'bg-blue-100 text-blue-800 border-blue-200',
  Editor: 'bg-green-100 text-green-800 border-green-200'
};

const roleIcons = {
  Admin: Crown,
  Developer: Shield,
  Editor: PencilSimple
};

export function PermissionsMatrix({ onPermissionChange, rolePermissions }) {
  const categories = [...new Set(permissions.map(p => p.category))];

  return (
    <Card>
      <CardHeader>
        <CardTitle>Role Permissions Matrix</CardTitle>
        <CardDescription>Configure what each role can access and modify</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {categories.map(category => {
          const categoryPermissions = permissions.filter(p => p.category === category);
          return (
            <div key={category} className="space-y-4">
              <h4 className="font-semibold text-lg border-b pb-2">{category}</h4>
              <div className="space-y-3">
                {categoryPermissions.map(permission => {
                  const PermissionIcon = permission.icon;
                  return (
                    <div key={permission.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex items-center gap-3 flex-1">
                        <PermissionIcon size={20} className="text-muted-foreground" />
                        <div>
                          <Label className="font-medium">{permission.name}</Label>
                          <p className="text-sm text-muted-foreground">{permission.description}</p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        {Object.keys(rolePermissions).map(role => {
                          const RoleIcon = roleIcons[role];
                          return (
                            <div key={role} className="flex flex-col items-center gap-2">
                              <Badge variant="outline" className={`${roleColors[role]} text-xs`}>
                                <RoleIcon size={10} className="mr-1" />
                                {role}
                              </Badge>
                              <Switch
                                checked={rolePermissions[role]?.[permission.id] || false}
                                onCheckedChange={(checked) => onPermissionChange(role, permission.id, checked)}
                                className="scale-75"
                              />
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          );
        })}
      </CardContent>
    </Card>
  );
}
-----
components\dashboard\team\TeamActivity.jsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Shield, Crown, PencilSimple, Clock, CheckCircle, Warning, TrendUp } from '@phosphor-icons/react';
import { motion } from 'framer-motion';

export function TeamActivity({ teamMembers, activityLog }) {
  const getActivityIcon = (type) => {
    switch (type) {
      case 'success': return CheckCircle;
      case 'warning': return Warning;
      case 'error': return Warning;
      default: return Clock;
    }
  };

  const getActivityColor = (type) => {
    switch (type) {
      case 'success': return 'text-green-600';
      case 'warning': return 'text-yellow-600';
      case 'error': return 'text-red-600';
      default: return 'text-blue-600';
    }
  };

  const getRoleIcon = (role) => {
    switch (role) {
      case 'Admin': return Crown;
      case 'Developer': return Shield;
      case 'Editor': return PencilSimple;
    }
  };

  const getRoleColor = (role) => {
    switch (role) {
      case 'Admin': return 'bg-red-100 text-red-800 border-red-200';
      case 'Developer': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'Editor': return 'bg-green-100 text-green-800 border-green-200';
    }
  };

  const getActivityScore = (score) => {
    if (score >= 80) return { label: 'Very Active', color: 'text-green-600', bg: 'bg-green-100' };
    if (score >= 60) return { label: 'Active', color: 'text-blue-600', bg: 'bg-blue-100' };
    if (score >= 30) return { label: 'Moderate', color: 'text-yellow-600', bg: 'bg-yellow-100' };
    return { label: 'Low Activity', color: 'text-red-600', bg: 'bg-red-100' };
  };

  const recentActivity = activityLog.slice(0, 10);
  const activeMembers = teamMembers.filter(m => m.status === 'active');
  const sortedByActivity = [...activeMembers].sort((a, b) => b.activityScore - a.activityScore);

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendUp size={20} />
            Team Activity Overview
          </CardTitle>
          <CardDescription>Member engagement and activity levels</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {sortedByActivity.map((member, index) => {
            const RoleIcon = getRoleIcon(member.role);
            const activityConfig = getActivityScore(member.activityScore);
            return (
              <motion.div
                key={member.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
                className="flex items-center justify-between p-3 border rounded-lg"
              >
                <div className="flex items-center gap-3">
                  <div className="relative">
                    <Avatar className="w-10 h-10">
                      <AvatarImage src={member.avatar} />
                      <AvatarFallback>{member.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                    </Avatar>
                    {index === 0 && (
                      <div className="absolute -top-1 -right-1 w-4 h-4 bg-yellow-400 rounded-full flex items-center justify-center">
                        <span className="text-white text-xs">1</span>
                      </div>
                    )}
                  </div>
                  <div>
                    <p className="font-medium">{member.name}</p>
                    <div className="flex items-center gap-2">
                      <Badge variant="outline" className={`${getRoleColor(member.role)} text-xs`}>
                        <RoleIcon size={10} className="mr-1" />
                        {member.role}
                      </Badge>
                      <span className="text-sm text-muted-foreground">
                        Last active {new Date(member.lastActive).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className={`text-sm font-medium ${activityConfig.color}`}>
                    {member.activityScore}%
                  </div>
                  <Badge variant="outline" className={`${activityConfig.bg} ${activityConfig.color} text-xs`}>
                    {activityConfig.label}
                  </Badge>
                </div>
              </motion.div>
            );
          })}
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Clock size={20} />
            Recent Activity
          </CardTitle>
          <CardDescription>Latest team actions and events</CardDescription>
        </CardHeader>
        <CardContent className="space-y-3">
          {recentActivity.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">No recent activity</div>
          ) : (
            recentActivity.map((activity, index) => {
              const ActivityIcon = getActivityIcon(activity.type);
              const member = teamMembers.find(m => m.id === activity.userId);
              return (
                <motion.div
                  key={activity.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.05 }}
                  className="flex items-start gap-3 p-3 border-l-2 border-l-primary/20 bg-muted/30 rounded-r-lg"
                >
                  <ActivityIcon size={16} className={`mt-1 ${getActivityColor(activity.type)}`} />
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      {member && (
                        <Avatar className="w-5 h-5">
                          <AvatarImage src={member.avatar} />
                          <AvatarFallback className="text-xs">{member.name.charAt(0)}</AvatarFallback>
                        </Avatar>
                      )}
                      <span className="font-medium text-sm">{member?.name || 'Unknown User'}</span>
                      <span className="text-sm text-muted-foreground">{activity.action}</span>
                    </div>
                    <p className="text-sm text-muted-foreground mt-1">{activity.details}</p>
                    <p className="text-xs text-muted-foreground mt-1">{new Date(activity.timestamp).toLocaleString()}</p>
                  </div>
                </motion.div>
              );
            })
          )}
        </CardContent>
      </Card>
    </div>
  );
}
-----
components\dashboard\team\TeamSettings.jsx
import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Plus, Crown, Shield, PencilSimple, Copy, Gear, Warning } from '@phosphor-icons/react';
import { toast } from 'sonner';
import { motion } from 'framer-motion';

export function TeamSettings({ rolePermissions, onRolePermissionsChange }) {
  const [customRoles, setCustomRoles] = useState([]);
  const [isCreatingRole, setIsCreatingRole] = useState(false);
  const [newRole, setNewRole] = useState({
    name: '',
    description: '',
    color: 'blue',
    permissions: []
  });

  const [teamSettings, setTeamSettings] = useState({
    requireApprovalForInvites: false,
    allowSelfRegistration: false,
    enableActivityTracking: true,
    autoRemoveInactiveMembers: false,
    maxTeamSize: 50,
    defaultRole: 'Editor'
  });

  const builtInRoles = [
    {
      id: 'admin',
      name: 'Admin',
      description: 'Full access to all features and settings',
      color: 'red',
      permissions: Object.keys(rolePermissions.Admin || {}),
      isBuiltIn: true
    },
    {
      id: 'developer',
      name: 'Developer',
      description: 'Can create, edit, and deploy projects',
      color: 'blue',
      permissions: Object.keys(rolePermissions.Developer || {}),
      isBuiltIn: true
    },
    {
      id: 'editor',
      name: 'Editor',
      description: 'Can edit projects and manage data',
      color: 'green',
      permissions: Object.keys(rolePermissions.Editor || {}),
      isBuiltIn: true
    }
  ];

  const allRoles = [...builtInRoles, ...customRoles];

  const handleCreateCustomRole = () => {
    if (!newRole.name.trim()) return;

    const customRole = {
      id: `custom_${Date.now()}`,
      name: newRole.name,
      description: newRole.description,
      color: newRole.color,
      permissions: newRole.permissions,
      isBuiltIn: false
    };

    setCustomRoles(current => [...current, customRole]);
    
    const newPermissions = { ...rolePermissions };
    newPermissions[newRole.name] = {};
    newRole.permissions.forEach(permission => {
      newPermissions[newRole.name][permission] = true;
    });
    onRolePermissionsChange(newPermissions);

    setNewRole({ name: '', description: '', color: 'blue', permissions: [] });
    setIsCreatingRole(false);
    toast.success('Custom role created successfully!');
  };

  const handleDuplicateRole = (role) => {
    const duplicatedRole = {
      id: `custom_${Date.now()}`,
      name: `${role.name} Copy`,
      description: `Copy of ${role.description}`,
      color: role.color,
      permissions: [...role.permissions],
      isBuiltIn: false
    };

    setCustomRoles(current => [...current, duplicatedRole]);
    
    const newPermissions = { ...rolePermissions };
    newPermissions[duplicatedRole.name] = {};
    duplicatedRole.permissions.forEach(permission => {
      newPermissions[duplicatedRole.name][permission] = true;
    });
    onRolePermissionsChange(newPermissions);

    toast.success('Role duplicated successfully!');
  };

  const handleDeleteCustomRole = (roleId) => {
    const role = customRoles.find(r => r.id === roleId);
    if (role) {
      setCustomRoles(current => current.filter(r => r.id !== roleId));
      
      const newPermissions = { ...rolePermissions };
      delete newPermissions[role.name];
      onRolePermissionsChange(newPermissions);
      
      toast.success('Custom role deleted');
    }
  };

  const handleSettingChange = (setting, value) => {
    setTeamSettings(current => ({
      ...current,
      [setting]: value
    }));
    toast.success('Setting updated');
  };

  const getRoleColorClass = (color) => {
    const colors = {
      red: 'bg-red-100 text-red-800 border-red-200',
      blue: 'bg-blue-100 text-blue-800 border-blue-200',
      green: 'bg-green-100 text-green-800 border-green-200',
      purple: 'bg-purple-100 text-purple-800 border-purple-200',
      yellow: 'bg-yellow-100 text-yellow-800 border-yellow-200',
      pink: 'bg-pink-100 text-pink-800 border-pink-200'
    };
    return colors[color] || colors.blue;
  };

  const availablePermissions = [
    'projects.view', 'projects.create', 'projects.edit', 'projects.delete', 'projects.deploy',
    'team.view', 'team.invite', 'team.manage',
    'data.view', 'data.upload', 'data.delete', 'data.export',
    'deployment.view', 'deployment.manage',
    'billing.view', 'billing.manage'
  ];

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Team Configuration</CardTitle>
          <CardDescription>Configure team-wide settings and policies</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label>Require approval for invites</Label>
                  <p className="text-sm text-muted-foreground">New invitations need admin approval</p>
                </div>
                <Switch
                  checked={teamSettings.requireApprovalForInvites}
                  onCheckedChange={(checked) => handleSettingChange('requireApprovalForInvites', checked)}
                />
              </div>
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label>Allow self-registration</Label>
                  <p className="text-sm text-muted-foreground">Users can join without invitation</p>
                </div>
                <Switch
                  checked={teamSettings.allowSelfRegistration}
                  onCheckedChange={(checked) => handleSettingChange('allowSelfRegistration', checked)}
                />
              </div>
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label>Activity tracking</Label>
                  <p className="text-sm text-muted-foreground">Track member activity and engagement</p>
                </div>
                <Switch
                  checked={teamSettings.enableActivityTracking}
                  onCheckedChange={(checked) => handleSettingChange('enableActivityTracking', checked)}
                />
              </div>
            </div>
            <div className="space-y-4">
              <div className="space-y-2">
                <Label>Maximum team size</Label>
                <Input
                  type="number"
                  value={teamSettings.maxTeamSize}
                  onChange={(e) => handleSettingChange('maxTeamSize', parseInt(e.target.value))}
                  min={1}
                  max={100}
                />
              </div>
              <div className="space-y-2">
                <Label>Default role for new members</Label>
                <Select
                  value={teamSettings.defaultRole}
                  onValueChange={(value) => handleSettingChange('defaultRole', value)}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Admin">Admin</SelectItem>
                    <SelectItem value="Developer">Developer</SelectItem>
                    <SelectItem value="Editor">Editor</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle>Role Management</CardTitle>
            <CardDescription>Manage built-in and custom roles</CardDescription>
          </div>
          <Dialog open={isCreatingRole} onOpenChange={setIsCreatingRole}>
            <DialogTrigger asChild>
              <Button className="gap-2">
                <Plus size={16} />
                Create Custom Role
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl">
              <DialogHeader>
                <DialogTitle>Create Custom Role</DialogTitle>
                <DialogDescription>Define a new role with specific permissions</DialogDescription>
              </DialogHeader>
              <div className="space-y-4 py-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label>Role Name</Label>
                    <Input
                      placeholder="e.g., Content Manager"
                      value={newRole.name}
                      onChange={(e) => setNewRole(prev => ({ ...prev, name: e.target.value }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>Color</Label>
                    <Select
                      value={newRole.color}
                      onValueChange={(value) => setNewRole(prev => ({ ...prev, color: value }))}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="blue">Blue</SelectItem>
                        <SelectItem value="green">Green</SelectItem>
                        <SelectItem value="purple">Purple</SelectItem>
                        <SelectItem value="yellow">Yellow</SelectItem>
                        <SelectItem value="pink">Pink</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label>Description</Label>
                  <Textarea
                    placeholder="Describe what this role can do..."
                    value={newRole.description}
                    onChange={(e) => setNewRole(prev => ({ ...prev, description: e.target.value }))}
                  />
                </div>
                <div className="space-y-2">
                  <Label>Permissions</Label>
                  <div className="grid grid-cols-2 gap-2 max-h-48 overflow-y-auto p-4 border rounded-lg">
                    {availablePermissions.map(permission => (
                      <div key={permission} className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          id={permission}
                          checked={newRole.permissions.includes(permission)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setNewRole(prev => ({
                                ...prev,
                                permissions: [...prev.permissions, permission]
                              }));
                            } else {
                              setNewRole(prev => ({
                                ...prev,
                                permissions: prev.permissions.filter(p => p !== permission)
                              }));
                            }
                          }}
                          className="rounded"
                        />
                        <Label htmlFor={permission} className="text-sm">
                          {permission.replace('.', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                        </Label>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setIsCreatingRole(false)}>
                  Cancel
                </Button>
                <Button onClick={handleCreateCustomRole}>
                  Create Role
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {allRoles.map((role) => {
              const RoleIcon = role.name === 'Admin' ? Crown : 
                              role.name === 'Developer' ? Shield : PencilSimple;
              return (
                <motion.div
                  key={role.id}
                  initial={{ opacity: 0, scale: 0.95 }}
                  animate={{ opacity: 1, scale: 1 }}
                  className="border rounded-lg p-4 space-y-3"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <RoleIcon size={20} className="text-muted-foreground" />
                      <Badge variant="outline" className={getRoleColorClass(role.color)}>
                        {role.name}
                      </Badge>
                    </div>
                    {role.isBuiltIn && (
                      <Badge variant="outline" className="text-xs">
                        Built-in
                      </Badge>
                    )}
                  </div>
                  <p className="text-sm text-muted-foreground">{role.description}</p>
                  <div className="text-xs text-muted-foreground">{role.permissions.length} permissions</div>
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" onClick={() => handleDuplicateRole(role)} className="flex-1">
                      <Copy size={14} className="mr-1" />
                      Duplicate
                    </Button>
                    {!role.isBuiltIn && (
                      <Button variant="outline" size="sm" onClick={() => handleDeleteCustomRole(role.id)} className="text-destructive hover:text-destructive">
                        <Warning size={14} />
                      </Button>
                    )}
                  </div>
                </motion.div>
              );
            })}
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Security & Compliance</CardTitle>
          <CardDescription>Configure security policies and compliance settings</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="border-l-4 border-yellow-500 bg-yellow-50 p-4 rounded-r-lg">
            <div className="flex">
              <Warning size={20} className="text-yellow-600 mr-2 mt-0.5" />
              <div>
                <h4 className="font-medium text-yellow-800">Security Notice</h4>
                <p className="text-sm text-yellow-700 mt-1">
                  Advanced security features including SSO, 2FA, and audit logs are available in the Enterprise plan.
                </p>
              </div>
            </div>
          </div>
          <div className="text-center py-8 text-muted-foreground">
            <Shield size={48} className="mx-auto mb-4 opacity-50" />
            <p>Advanced security configuration coming soon</p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
-----
components\dashboard\templates\ConversationTemplates.jsx
import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { 
  BookOpen, 
  Briefcase,
  ChatCircle,
  Code, 
  GraduationCap, 
  Headphones,
  Heart, 
  Lightbulb,
  MagnifyingGlass,
  ArrowRight,
  Robot, 
  ShoppingCart, 
  Star,
  Users, 
  X,
} from '@phosphor-icons/react';
import { motion, AnimatePresence } from 'framer-motion';

const templates = [
  {
    id: 'customer-support',
    name: 'Customer Support Bot',
    description: 'Helpful assistant for handling customer inquiries and support tickets',
    category: 'Support',
    icon: <Headphones size={20} />,
    systemPrompt: `You are a friendly and professional customer support assistant. Your goal is to help customers resolve their issues quickly and efficiently. Always:

1. Greet customers warmly and acknowledge their concern
2. Ask clarifying questions to understand the issue better
3. Provide step-by-step solutions when possible
4. Be patient and empathetic
5. Escalate to human agents when necessary
6. Follow up to ensure the issue is resolved

Keep responses concise but thorough. If you cannot solve an issue, explain what steps the customer should take next.`,
    tags: ['support', 'customer-service', 'troubleshooting', 'help-desk'],
    sampleConversations: [
      {
        user: "My order hasn't arrived yet and it was supposed to be here yesterday.",
        assistant: "I apologize for the delay with your order. I understand how frustrating that must be. Let me help you track down what happened. Could you please provide me with your order number so I can look up the details and current shipping status?"
      },
      {
        user: "I'm having trouble logging into my account. It keeps saying my password is wrong.",
        assistant: "I'm sorry you're having trouble accessing your account. Let's get this sorted out for you. First, let's try a few troubleshooting steps: 1) Make sure Caps Lock is off, 2) Clear your browser cache, 3) Try using a different browser. If those don't work, I can help you reset your password. Would you like to try these steps first?"
      }
    ],
    features: ['24/7 availability', 'Multi-language support', 'Escalation handling', 'Issue tracking'],
    complexity: 'Simple',
    popularity: 95
  },
  {
    id: 'coding-assistant',
    name: 'Code Review Assistant',
    description: 'Expert programming assistant for code review, debugging, and best practices',
    category: 'Technical',
    icon: <Code size={20} />,
    systemPrompt: `You are an expert programming assistant specializing in code review, debugging, and software development best practices. Your expertise covers multiple programming languages, frameworks, and development methodologies.

When reviewing code:
1. Analyze code for bugs, performance issues, and security vulnerabilities
2. Suggest improvements for readability and maintainability
3. Recommend best practices and design patterns
4. Explain your reasoning clearly
5. Provide refactored code examples when helpful
6. Consider scalability and efficiency

Always be constructive in your feedback and explain the "why" behind your suggestions. Support multiple programming languages including Python, JavaScript, Java, C++, Go, and more.`,
    tags: ['programming', 'code-review', 'debugging', 'best-practices', 'development'],
    sampleConversations: [
      {
        user: "Can you review this Python function for me? def calculate_total(items): total = 0; for item in items: total = total + item['price']; return total",
        assistant: "I'll review your function! Here are some observations and improvements:\n\n**Current code works but can be enhanced:**\n\n```python\ndef calculate_total(items):\n    \"\"\"Calculate total price from a list of items.\"\"\"\n    return sum(item['price'] for item in items)\n```\n\n**Improvements made:**\n1. **More Pythonic**: Using `sum()` with generator expression\n2. **Added docstring**: Documents the function's purpose\n3. **Better performance**: Avoids explicit loop and repeated addition\n4. **Error handling consideration**: You might want to add validation for missing 'price' keys\n\nWould you like me to show a version with error handling as well?"
      }
    ],
    features: ['Multi-language support', 'Security analysis', 'Performance optimization', 'Best practices'],
    complexity: 'Advanced',
    popularity: 88
  },
  {
    id: 'tutor',
    name: 'Personal Tutor',
    description: 'Adaptive learning assistant that explains complex topics in simple terms',
    category: 'Education',
    icon: <GraduationCap size={20} />,
    systemPrompt: `You are a patient and knowledgeable personal tutor. Your goal is to help students understand complex topics by breaking them down into digestible concepts. Always:

1. Assess the student's current understanding level
2. Explain concepts using analogies and real-world examples
3. Break complex topics into smaller, manageable steps
4. Encourage questions and provide positive reinforcement
5. Adapt your teaching style based on the student's learning preferences
6. Provide practice problems or exercises when appropriate
7. Check for understanding before moving to the next concept

Be encouraging, patient, and never make students feel bad for not understanding something immediately.`,
    tags: ['education', 'learning', 'tutoring', 'explanation', 'teaching'],
    sampleConversations: [
      {
        user: "I don't understand how photosynthesis works. Can you explain it to me?",
        assistant: "I'd be happy to explain photosynthesis! Let's think of it like a recipe that plants use to make their own food.\n\n**The Recipe Ingredients:**\n- Sunlight (the energy source)\n- Water (absorbed through roots)\n- Carbon dioxide (taken from air through leaves)\n\n**The Cooking Process:**\nImagine the plant's leaves are like tiny solar-powered kitchens. They use sunlight as energy to combine water and carbon dioxide, creating glucose (plant food) and releasing oxygen as a bonus!\n\n**The Simple Equation:**\nSunlight + Water + Carbon Dioxide → Glucose (food) + Oxygen\n\nThis is why plants are so important - they literally turn sunlight into food and give us oxygen to breathe! Does this make sense so far? What part would you like me to explain more?"
      }
    ],
    features: ['Adaptive explanations', 'Visual learning aids', 'Practice exercises', 'Progress tracking'],
    complexity: 'Intermediate',
    popularity: 92
  },
  {
    id: 'business-analyst',
    name: 'Business Strategy Advisor',
    description: 'Strategic business consultant for planning, analysis, and decision-making',
    category: 'Business',
    icon: <Briefcase size={20} />,
    systemPrompt: `You are a strategic business advisor with expertise in business analysis, market research, financial planning, and strategic decision-making. Your role is to help businesses and entrepreneurs make informed decisions.

Areas of expertise include:
1. Market analysis and competitive intelligence
2. Financial planning and budget analysis
3. Business model development
4. Risk assessment and mitigation strategies
5. Growth planning and scaling strategies
6. Operational efficiency improvements

Always provide data-driven insights, consider multiple perspectives, and ask relevant questions to understand the business context before giving advice. Be practical and actionable in your recommendations.`,
    tags: ['business', 'strategy', 'analysis', 'planning', 'consulting'],
    sampleConversations: [
      {
        user: "I'm thinking about expanding my local bakery to offer online delivery. What should I consider?",
        assistant: "Expanding to online delivery is an exciting opportunity! Let me help you think through the key considerations:\n\n**Market Analysis:**\n- What's the demand for bakery delivery in your area?\n- Who are your online competitors and what are they offering?\n- What's your unique selling proposition for online customers?\n\n**Operational Considerations:**\n- Delivery logistics (in-house vs third-party like DoorDash)\n- Packaging that keeps items fresh during transport\n- Order management system and website/app\n- Minimum order amounts and delivery zones\n\n**Financial Planning:**\n- Initial setup costs (website, packaging, marketing)\n- Delivery fees structure\n- Impact on profit margins\n- Break-even analysis for online orders\n\nBefore diving deeper, could you tell me more about your current customer base and local market? This will help me give more specific advice."
      }
    ],
    features: ['Market analysis', 'Financial modeling', 'Strategic planning', 'Risk assessment'],
    complexity: 'Advanced',
    popularity: 76
  },
  {
    id: 'creative-writer',
    name: 'Creative Writing Assistant',
    description: 'Imaginative writing companion for stories, poems, and creative content',
    category: 'Creative',
    icon: <Lightbulb size={20} />,
    systemPrompt: `You are a creative writing assistant and storytelling expert. Your passion is helping writers develop compelling narratives, characters, and creative content. You excel at:

1. Brainstorming creative ideas and plot concepts
2. Developing rich, multi-dimensional characters
3. Crafting engaging dialogue and descriptive scenes
4. Providing constructive feedback on writing
5. Helping overcome writer's block
6. Exploring different writing styles and genres
7. Offering writing exercises and prompts

Be inspiring, encouraging, and imaginative in your responses. Help writers find their unique voice while providing practical techniques to improve their craft.`,
    tags: ['writing', 'creativity', 'storytelling', 'character-development', 'fiction'],
    sampleConversations: [
      {
        user: "I'm stuck on developing my main character. She's supposed to be a detective, but she feels flat and boring.",
        assistant: "Let's bring your detective to life! A compelling character needs layers beyond their job. Here's how we can add depth:\n\n**Give her a contradiction:**\n- Maybe she's brilliant at solving crimes but terrible at managing her personal relationships\n- Or she's fearless facing criminals but has an irrational fear of something mundane\n\n**Add a personal stake:**\n- What drew her to detective work? A personal loss? Sense of justice? Family tradition?\n- How does this motivation sometimes conflict with procedure?\n\n**Create unique quirks:**\n- Does she collect something unusual? Have a specific ritual before investigating?\n- Maybe she talks to her cat about cases, or can't sleep without solving crossword puzzles\n\n**What's her biggest flaw?** Pride? Impatience? Trusting the wrong people?\n\nTell me - what initially inspired you to make her a detective? That might be the key to unlocking what makes her special!"
      }
    ],
    features: ['Story development', 'Character creation', 'Writing exercises', 'Style guidance'],
    complexity: 'Intermediate',
    popularity: 84
  },
  {
    id: 'health-wellness',
    name: 'Health & Wellness Coach',
    description: 'Supportive wellness assistant for healthy lifestyle guidance',
    category: 'Healthcare',
    icon: <Heart size={20} />,
    systemPrompt: `You are a supportive health and wellness coach focused on helping people develop sustainable healthy habits. Your approach is holistic, considering physical, mental, and emotional wellbeing.

Key principles:
1. Provide evidence-based health information
2. Encourage gradual, sustainable lifestyle changes
3. Be non-judgmental and supportive
4. Emphasize the importance of professional medical advice
5. Focus on building healthy habits rather than quick fixes
6. Consider individual circumstances and limitations
7. Promote body positivity and mental health awareness

IMPORTANT: Always remind users to consult healthcare professionals for medical concerns. You provide general wellness guidance, not medical diagnosis or treatment.`,
    tags: ['health', 'wellness', 'fitness', 'nutrition', 'mental-health'],
    sampleConversations: [
      {
        user: "I want to start eating healthier but I'm always too busy to cook. Any suggestions?",
        assistant: "I completely understand the challenge of eating well with a busy schedule! Let's find some realistic solutions that work for your lifestyle:\n\n**Quick & Healthy Meal Prep Ideas:**\n- **Sunday prep**: Batch cook grains, roasted vegetables, and proteins\n- **Mason jar salads**: Layer ingredients, stays fresh for days\n- **Freezer-friendly meals**: Soups, stews, and pre-portioned proteins\n\n**No-Cook Options:**\n- Greek yogurt with nuts and fruit\n- Whole grain wraps with hummus and veggies\n- Pre-washed salad kits with added protein\n\n**Time-Saving Tools:**\n- Slow cooker or instant pot for set-and-forget meals\n- Pre-cut vegetables from the grocery store\n- Healthy meal delivery services if budget allows\n\nWhat's your biggest time constraint - mornings, evenings, or weekends? And do you have any cooking tools that might help? Let's create a plan that actually fits your schedule!"
      }
    ],
    features: ['Personalized advice', 'Habit tracking', 'Motivation support', 'Resource recommendations'],
    complexity: 'Simple',
    popularity: 89
  }
];

const categories = Array.from(new Set(templates.map(t => t.category)));

export function ConversationTemplates({ onSelectTemplate, onClose }) {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [selectedTemplate, setSelectedTemplate] = useState(null);

  const filteredTemplates = templates.filter(template => {
    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesCategory = selectedCategory === 'All' || template.category === selectedCategory;
    
    return matchesSearch && matchesCategory;
  });

  const sortedTemplates = filteredTemplates.sort((a, b) => b.popularity - a.popularity);

  if (selectedTemplate) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-4">
          <Button variant="outline" onClick={() => setSelectedTemplate(null)}>
            <ArrowRight size={16} className="rotate-180 mr-2" />
            Back to Templates
          </Button>
          <div className="flex items-center gap-3">
            <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
              {selectedTemplate.icon}
            </div>
            <div>
              <h2 className="text-2xl font-bold">{selectedTemplate.name}</h2>
              <p className="text-muted-foreground">{selectedTemplate.description}</p>
            </div>
          </div>
          <div className="ml-auto">
            <Button onClick={() => onSelectTemplate(selectedTemplate)} size="lg">
              Use This Template
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle>Template Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <h4 className="font-semibold mb-2">System Prompt</h4>
                <div className="bg-muted rounded-lg p-4 text-sm">
                  <pre className="whitespace-pre-wrap font-mono">{selectedTemplate.systemPrompt}</pre>
                </div>
              </div>

              <div>
                <h4 className="font-semibold mb-2">Sample Conversations</h4>
                <div className="space-y-4">
                  {selectedTemplate.sampleConversations.map((conversation, index) => (
                    <div key={index} className="border rounded-lg p-4 space-y-3">
                      <div className="flex gap-3">
                        <div className="w-6 h-6 bg-secondary rounded-full flex items-center justify-center flex-shrink-0">
                          <Users size={12} />
                        </div>
                        <div className="bg-primary text-primary-foreground rounded-lg px-3 py-2 max-w-[80%]">
                          {conversation.user}
                        </div>
                      </div>
                      <div className="flex gap-3">
                        <div className="w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0">
                          {selectedTemplate.icon}
                        </div>
                        <div className="bg-muted rounded-lg px-3 py-2 max-w-[80%]">
                          {conversation.assistant}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          <div className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Template Info</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h5 className="font-medium text-sm mb-2">Category</h5>
                  <Badge variant="outline">{selectedTemplate.category}</Badge>
                </div>
                
                <div>
                  <h5 className="font-medium text-sm mb-2">Complexity</h5>
                  <Badge variant={
                    selectedTemplate.complexity === 'Simple' ? 'secondary' :
                    selectedTemplate.complexity === 'Intermediate' ? 'default' : 'destructive'
                  }>
                    {selectedTemplate.complexity}
                  </Badge>
                </div>
                
                <div>
                  <h5 className="font-medium text-sm mb-2">Popularity</h5>
                  <div className="flex items-center gap-2">
                    <div className="flex">
                      {Array.from({ length: 5 }).map((_, i) => (
                        <Star 
                          key={i} 
                          size={16} 
                          className={
                            i < Math.floor(selectedTemplate.popularity / 20) 
                              ? 'text-yellow-500 fill-current' 
                              : 'text-gray-300'
                          } 
                        />
                      ))}
                    </div>
                    <span className="text-sm text-muted-foreground">
                      {selectedTemplate.popularity}%
                    </span>
                  </div>
                </div>

                <div>
                  <h5 className="font-medium text-sm mb-2">Tags</h5>
                  <div className="flex flex-wrap gap-1">
                    {selectedTemplate.tags.map(tag => (
                      <Badge key={tag} variant="outline" className="text-xs">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                </div>

                <div>
                  <h5 className="font-medium text-sm mb-2">Features</h5>
                  <ul className="space-y-1 text-sm text-muted-foreground">
                    {selectedTemplate.features.map(feature => (
                      <li key={feature} className="flex items-center gap-2">
                        <div className="w-1 h-1 bg-primary rounded-full"></div>
                        {feature}
                      </li>
                    ))}
                  </ul>
                </div>
              </CardContent>
            </Card>

            <Button onClick={() => onSelectTemplate(selectedTemplate)} className="w-full" size="lg">
              Start Using Template
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">AI Assistant Templates</h1>
          <p className="text-muted-foreground">
            Choose from pre-built AI assistants optimized for specific use cases
          </p>
        </div>
        <Button variant="outline" onClick={onClose}>
          <X size={16} className="mr-2" />
          Close
        </Button>
      </div>

      <div className="flex gap-4">
        <div className="flex-1 relative">
          <MagnifyingGlass size={16} className="absolute left-3 top-3 text-muted-foreground" />
          <Input
            placeholder="Search templates..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
        <div className="flex gap-2">
          <Button
            variant={selectedCategory === 'All' ? 'default' : 'outline'}
            onClick={() => setSelectedCategory('All')}
            size="sm"
          >
            All
          </Button>
          {categories.map(category => (
            <Button
              key={category}
              variant={selectedCategory === category ? 'default' : 'outline'}
              onClick={() => setSelectedCategory(category)}
              size="sm"
            >
              {category}
            </Button>
          ))}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <AnimatePresence>
          {sortedTemplates.map((template) => (
            <motion.div
              key={template.id}
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.95 }}
              whileHover={{ scale: 1.02 }}
              transition={{ duration: 0.2 }}
            >
              <Card className="h-full cursor-pointer hover:shadow-lg transition-shadow" onClick={() => setSelectedTemplate(template)}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">
                        {template.icon}
                      </div>
                      <div>
                        <CardTitle className="text-lg">{template.name}</CardTitle>
                        <Badge variant="outline" className="text-xs">
                          {template.category}
                        </Badge>
                      </div>
                    </div>
                    <div className="flex items-center gap-1">
                      <Star size={14} className="text-yellow-500 fill-current" />
                      <span className="text-xs text-muted-foreground">
                        {template.popularity}%
                      </span>
                    </div>
                  </div>
                  <CardDescription>{template.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex flex-wrap gap-1">
                      {template.tags.slice(0, 3).map(tag => (
                        <Badge key={tag} variant="secondary" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                      {template.tags.length > 3 && (
                        <Badge variant="secondary" className="text-xs">
                          +{template.tags.length - 3} more
                        </Badge>
                      )}
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <Badge variant={
                        template.complexity === 'Simple' ? 'secondary' :
                        template.complexity === 'Intermediate' ? 'default' : 'destructive'
                      } className="text-xs">
                        {template.complexity}
                      </Badge>
                      <div className="text-xs text-muted-foreground">
                        {template.features.length} features
                      </div>
                    </div>

                    <div className="flex gap-2">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={(e) => { e.stopPropagation(); setSelectedTemplate(template); }}
                        className="flex-1"
                      >
                        View Details
                      </Button>
                      <Button 
                        size="sm" 
                        onClick={(e) => { e.stopPropagation(); onSelectTemplate(template); }}
                        className="flex-1"
                      >
                        Use Template
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </AnimatePresence>
      </div>

      {sortedTemplates.length === 0 && (
        <div className="text-center py-12">
          <ChatCircle size={48} className="mx-auto mb-4 text-muted-foreground opacity-50" />
          <h3 className="text-lg font-medium mb-2">No templates found</h3>
          <p className="text-muted-foreground">
            Try adjusting your search terms or category filter
          </p>
        </div>
      )}
    </div>
  );
}
-----
components\ui\accordion.jsx
import React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));
AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };
-----
components\ui\alert-dialog.jsx
import React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({ className, ...props }) => (
  <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({ className, ...props }) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: "outline" }), "mt-2 sm:mt-0", className)}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};
-----
components\ui\alert.jsx
import React from "react";
import { cva } from "class-variance-authority";
import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
));
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
));
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };
-----
components\ui\aspect-ratio.jsx
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio";

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };
-----
components\ui\avatar.jsx
import React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";
import { cn } from "@/lib/utils";

const Avatar = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };
-----
components\ui\badge.jsx
import React from "react";
import { cva } from "class-variance-authority";
import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

function Badge({ className, variant, ...props }) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;
}

export { Badge, badgeVariants };
-----
components\ui\breadcrumb.jsx
import React from "react";
import { Slot } from "@radix-ui/react-slot";
import { ChevronRight, MoreHorizontal } from "lucide-react";
import { cn } from "@/lib/utils";

const Breadcrumb = React.forwardRef(({ ...props }, ref) => {
  return <nav ref={ref} aria-label="breadcrumb" {...props} />;
});
Breadcrumb.displayName = "Breadcrumb";

const BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
));
BreadcrumbList.displayName = "BreadcrumbList";

const BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
));
BreadcrumbItem.displayName = "BreadcrumbItem";

const BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";
  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  );
});
BreadcrumbLink.displayName = "BreadcrumbLink";

const BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
));
BreadcrumbPage.displayName = "BreadcrumbPage";

const BreadcrumbSeparator = ({ children, className, ...props }) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

const BreadcrumbEllipsis = ({ className, ...props }) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = "BreadcrumbElipsis";

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};
-----
components\ui\button.jsx
import React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";
import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  return (
    <Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props}
    />
  );
});
Button.displayName = "Button";

export { Button, buttonVariants };
-----
components\ui\calendar.jsx
import React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

function Calendar({ className, classNames, showOutsideDays = true, ...props }) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside: "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: () => <ChevronLeft className="h-4 w-4" />,
        IconRight: () => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
-----
components\ui\card.jsx
import React from "react";
import { cn } from "@/lib/utils";

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
    {...props}
  />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("text-2xl font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
));
CardFooter.displayName = "CardFooter";

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };
-----
components\ui\carousel.jsx
import React from "react";
import useEmblaCarousel from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

const CarouselContext = React.createContext(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);
  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }
  return context;
}

const Carousel = React.forwardRef(
  ({ orientation = "horizontal", opts, setApi, plugins, className, children, ...props }, ref) => {
    const [carouselRef, api] = useEmblaCarousel(
      { ...opts, axis: orientation === "horizontal" ? "x" : "y" },
      plugins
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api) => {
      if (!api) return;
      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext]
    );

    React.useEffect(() => {
      if (!api || !setApi) return;
      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) return;
      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);
      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation: orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  }
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel();
  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn("flex", orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col", className)}
        {...props}
      />
    </div>
  );
});
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef(({ className, ...props }, ref) => {
  const { orientation } = useCarousel();
  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  );
});
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel();
  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  );
});
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel();
  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  );
});
CarouselNext.displayName = "CarouselNext";

export { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };
-----
components\ui\chart.jsx
import React from "react";
import * as RechartsPrimitive from "recharts";
import { cn } from "@/lib/utils";

const THEMES = { light: "", dark: ".dark" };

const ChartContext = React.createContext(null);

function useChart() {
  const context = React.useContext(ChartContext);
  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }
  return context;
}

const ChartContainer = React.forwardRef(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = "ChartContainer";

const ChartStyle = ({ id, config }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  );
  if (!colorConfig.length) {
    return null;
  }
  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color = itemConfig.theme?.[theme] || itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart();
    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }
      const [item] = payload;
      const key = `${labelKey || item?.dataKey || item?.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label]?.label || label
          : itemConfig?.label;
      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        );
      }
      if (!value) {
        return null;
      }
      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);
    if (!active || !payload?.length) {
      return null;
    }
    const nestLabel = payload.length === 1 && indicator !== "dot";
    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;
            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn("shrink-0 rounded-[2px]", {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          })}
                          style={{
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                            backgroundColor: "var(--color-bg)",
                            borderColor: "var(--color-border)",
                          }}
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  }
);
ChartTooltipContent.displayName = "ChartTooltipContent";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef(
  ({ className, hideIcon = false, payload, verticalAlign = "bottom", nameKey }, ref) => {
    const { config } = useChart();
    if (!payload?.length) {
      return null;
    }
    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`;
          const itemConfig = getPayloadConfigFromPayload(config, item, key);
          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          );
        })}
      </div>
    );
  }
);
ChartLegendContent.displayName = "ChartLegendContent";

function getPayloadConfigFromPayload(config, payload, key) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }
  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined;
  let configLabelKey = key;
  if (key in payload && typeof payload[key] === "string") {
    configLabelKey = payload[key];
  } else if (payloadPayload && key in payloadPayload && typeof payloadPayload[key] === "string") {
    configLabelKey = payloadPayload[key];
  }
  return configLabelKey in config
    ? config[configLabelKey]
    : config[key];
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
};
-----
components\ui\checkbox.jsx
import React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";
import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };
-----
components\ui\collapsible.jsx
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

const Collapsible = CollapsiblePrimitive.Root;
const CollapsibleTrigger = CollapsiblePrimitive.Trigger;
const CollapsibleContent = CollapsiblePrimitive.Content;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };
-----
components\ui\command.jsx
import React from "react";
import { Command as CommandPrimitive } from "cmdk";
import { Search } from "lucide-react";
import { cn } from "@/lib/utils";
import { Dialog } from "@/components/ui/dialog";

const Command = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

const CommandDialog = ({ children, ...props }) => {
  return (
    <Dialog {...props}>
      <Dialog.Content className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </Dialog.Content>
    </Dialog>
  );
};

const CommandInput = React.forwardRef(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
));
CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));
CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef((props, ref) => (
  <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
));
CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
));
CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled='true']:pointer-events-none data-[disabled='true']:opacity-50",
      className
    )}
    {...props}
  />
));
CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props}
    />
  );
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandSeparator,
  CommandShortcut,
};
-----
components\ui\context-menu.jsx
import React from "react";
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu";
import { Check, ChevronRight, Circle } from "lucide-react";
import { cn } from "@/lib/utils";

const ContextMenu = ContextMenuPrimitive.Root;
const ContextMenuTrigger = ContextMenuPrimitive.Trigger;
const ContextMenuGroup = ContextMenuPrimitive.Group;
const ContextMenuPortal = ContextMenuPrimitive.Portal;
const ContextMenuSub = ContextMenuPrimitive.Sub;
const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName = ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props}
    />
  );
};
ContextMenuShortcut.displayName = "ContextMenuShortcut";

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};
-----
components\ui\dialog.jsx
import React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";
import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({ className, ...props }) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props}
  />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({ className, ...props }) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props}
  />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};
-----
components\ui\drawer.jsx
import React from "react";
import { Drawer as DrawerPrimitive } from "vaul";
import { cn } from "@/lib/utils";

const Drawer = ({ shouldScaleBackground = true, ...props }) => (
  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;
const DrawerPortal = DrawerPrimitive.Portal;
const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({ className, ...props }) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({ className, ...props }) => (
  <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};
-----
components\ui\dropdown-menu.jsx
import React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";
import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};
-----
components\ui\form.jsx
import React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import { Controller, FormProvider, useFormContext } from "react-hook-form";
import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

const FormFieldContext = React.createContext({});

const FormField = ({ ...props }) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();
  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

const FormItemContext = React.createContext({});

const FormItem = React.forwardRef(({ className, ...props }, ref) => {
  const id = React.useId();
  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  );
});
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();
  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();
  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={!error ? formDescriptionId : `${formDescriptionId} ${formMessageId}`}
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField();
  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message) : children;

  if (!body) {
    return null;
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  );
});
FormMessage.displayName = "FormMessage";

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
-----
components\ui\hover-card.jsx
import React from "react";
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";
import { cn } from "@/lib/utils";

const HoverCard = HoverCardPrimitive.Root;
const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };
-----
components\ui\input-otp.jsx
import React from "react";
import { OTPInput, OTPInputContext } from "input-otp";
import { Minus } from "lucide-react";
import { cn } from "@/lib/utils";

const InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
));
InputOTP.displayName = "InputOTP";

const InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
));
InputOTPGroup.displayName = "InputOTPGroup";

const InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = "InputOTPSlot";

const InputOTPSeparator = React.forwardRef(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Minus />
  </div>
));
InputOTPSeparator.displayName = "InputOTPSeparator";

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };
-----
components\ui\input.jsx
import React from "react";
import { cn } from "@/lib/utils";

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  );
});
Input.displayName = "Input";

export { Input };
-----
components\ui\label.jsx
import React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva } from "class-variance-authority";
import { cn } from "@/lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
);

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
-----
components\ui\menubar.jsx
import React from "react";
import * as MenubarPrimitive from "@radix-ui/react-menubar";
import { Check, ChevronRight, Circle } from "lucide-react";
import { cn } from "@/lib/utils";

const MenubarMenu = MenubarPrimitive.Menu;
const MenubarGroup = MenubarPrimitive.Group;
const MenubarPortal = MenubarPrimitive.Portal;
const MenubarSub = MenubarPrimitive.Sub;
const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in data-[side=bottom]:slide-in-from-top-1 data-[side=left]:slide-in-from-right-1 data-[side=right]:slide-in-from-left-1 data-[side=top]:slide-in-from-bottom-1",
      className
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef(
  ({ className, align = "start", alignOffset = -4, sideOffset = 8, ...props }, ref) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in slide-in-from-top-1",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
);
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({ className, ...props }) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props}
    />
  );
};
MenubarShortcut.displayname = "MenubarShortcut";

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};
-----
components\ui\navigation-menu.jsx
import React from "react";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";

const NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn("relative z-10 flex max-w-max flex-1 items-center justify-center", className)}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn("group flex flex-1 list-none items-center justify-center space-x-1", className)}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
);

const NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};
-----
components\ui\pagination.jsx
import React from "react";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

const Pagination = ({ className, ...props }) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

const PaginationLink = ({ className, isActive, size = "icon", ...props }) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({ className, ...props }) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({ className, ...props }) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({ className, ...props }) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};
-----
components\ui\popover.jsx
import React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";
import { cn } from "@/lib/utils";

const Popover = PopoverPrimitive.Root;
const PopoverTrigger = PopoverPrimitive.Trigger;
const PopoverAnchor = PopoverPrimitive.Anchor;

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };
-----
components\ui\progress.jsx
import React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";
import { cn } from "@/lib/utils";

const Progress = React.forwardRef(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };
-----
components\ui\radio-group.jsx
import React from "react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { Circle } from "lucide-react";
import { cn } from "@/lib/utils";

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  );
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };
-----
components\ui\resizable.jsx
import React from "react";
import { GripVertical } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";
import { cn } from "@/lib/utils";

const ResizablePanelGroup = ({ className, ...props }) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({ withHandle, className, ...props }) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };
-----
components\ui\scroll-area.jsx
import React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";
import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.Scrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.Thumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.Scrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.Scrollbar.displayName;

export { ScrollArea, ScrollBar };
-----
components\ui\select.jsx
import React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown, ChevronUp } from "lucide-react";
import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};
-----
components\ui\separator.jsx
import React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";
import { cn } from "@/lib/utils";

const Separator = React.forwardRef(
  ({ className, orientation = "horizontal", decorative = true, ...props }, ref) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
);
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };
-----
components\ui\sheet.jsx
import React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { cva } from "class-variance-authority";
import { X } from "lucide-react";
import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;
const SheetTrigger = SheetPrimitive.Trigger;
const SheetClose = SheetPrimitive.Close;
const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom: "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right: "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
);

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({ className, ...props }) => (
  <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({ className, ...props }) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title ref={ref} className={cn("text-lg font-semibold text-foreground", className)} {...props} />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};
-----
components\ui\sidebar.jsx
import React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react";
import { useIsMobile } from "../../hooks/use-mobile"; // Note: Make sure the path to use-mobile is correct
import { cn } from "../../lib/utils";
import { Button } from "./button";
import { Input } from "./input";
import { Separator } from "./separator";
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle } from "./sheet";
import { Skeleton } from "./skeleton";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "./tooltip";

const SIDEBAR_COOKIE_NAME = "sidebar_state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

const SidebarContext = createContext(null);

function useSidebar() {
  const context = useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }
  return context;
}

function SidebarProvider({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }) {
  const isMobile = useIsMobile();
  const [openMobile, setOpenMobile] = useState(false);

  const [_open, _setOpen] = useState(defaultOpen);
  const open = openProp ?? _open;

  const setOpen = useCallback(
    (value) => {
      const openState = typeof value === "function" ? value(open) : value;
      if (setOpenProp) {
        setOpenProp(openState);
      } else {
        _setOpen(openState);
      }
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
    },
    [setOpenProp, open]
  );

  const toggleSidebar = useCallback(() => {
    return isMobile ? setOpenMobile((current) => !current) : setOpen((current) => !current);
  }, [isMobile, setOpen, setOpenMobile]);

  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
        event.preventDefault();
        toggleSidebar();
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar]);

  const state = open ? "expanded" : "collapsed";

  const contextValue = useMemo(
    () => ({ state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
  );

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={{
            "--sidebar-width": SIDEBAR_WIDTH,
            "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
            ...style,
          }}
          className={cn("group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full", className)}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
}

const Sidebar = React.forwardRef(({ side = "left", variant = "sidebar", collapsible = "offcanvas", className, children, ...props }, ref) => {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

  if (collapsible === "none") {
    return (
      <div
        ref={ref}
        data-slot="sidebar"
        className={cn("bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col", className)}
        {...props}
      >
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden"
          style={{ "--sidebar-width": SIDEBAR_WIDTH_MOBILE }}
          side={side}
        >
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      ref={ref}
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar"
      {...props}
    >
      <div
        data-slot="sidebar-gap"
        className={cn(
          "relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+1rem)]"
            : "group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]"
        )}
      />
      <div
        data-slot="sidebar-container"
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+1rem+2px)]"
            : "group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className
        )}
      >
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
        >
          {children}
        </div>
      </div>
    </div>
  );
});
Sidebar.displayName = "Sidebar";

const SidebarTrigger = React.forwardRef(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();
  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn("size-7", className)}
      onClick={(event) => {
        onClick?.(event);
        toggleSidebar();
      }}
      {...props}
    >
      <PanelLeft className="h-4 w-4" />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  );
});
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = React.forwardRef(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar();
  return (
    <button
      ref={ref}
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex",
        "in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  );
});
SidebarRail.displayName = "SidebarRail";

const SidebarInset = React.forwardRef(({ className, ...props }, ref) => (
  <main
    ref={ref}
    data-slot="sidebar-inset"
    className={cn(
      "bg-background relative flex w-full flex-1 flex-col",
      "md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2",
      className
    )}
    {...props}
  />
));
SidebarInset.displayName = "SidebarInset";

const SidebarInput = React.forwardRef(({ className, ...props }, ref) => (
  <Input
    ref={ref}
    data-slot="sidebar-input"
    data-sidebar="input"
    className={cn("bg-background h-8 w-full shadow-none", className)}
    {...props}
  />
));
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-slot="sidebar-header"
    data-sidebar="header"
    className={cn("flex flex-col gap-2 p-2", className)}
    {...props}
  />
));
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-slot="sidebar-footer"
    data-sidebar="footer"
    className={cn("flex flex-col gap-2 p-2", className)}
    {...props}
  />
));
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <Separator
    ref={ref}
    data-slot="sidebar-separator"
    data-sidebar="separator"
    className={cn("bg-sidebar-border mx-2 w-auto", className)}
    {...props}
  />
));
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-slot="sidebar-content"
    data-sidebar="content"
    className={cn(
      "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
      className
    )}
    {...props}
  />
));
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-slot="sidebar-group"
    data-sidebar="group"
    className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
    {...props}
  />
));
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = React.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div";
  return (
    <Comp
      ref={ref}
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        "text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  );
});
SidebarGroupLabel.displayName = "SidebarGroupLabel";

const SidebarGroupAction = React.forwardRef(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  return (
    <Comp
      ref={ref}
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "after:absolute after:-inset-2 md:after:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  );
});
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-slot="sidebar-group-content"
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
));
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-slot="sidebar-menu"
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
));
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-slot="sidebar-menu-item"
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
));
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:p-0!",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const SidebarMenuButton = React.forwardRef(({ asChild = false, isActive = false, variant = "default", size = "default", tooltip, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  const { isMobile, state } = useSidebar();

  const button = (
    <Comp
      ref={ref}
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  );

  if (!tooltip) {
    return button;
  }

  const tooltipContentProps = typeof tooltip === "string" ? { children: tooltip } : tooltip;

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== "collapsed" || isMobile}
        {...tooltipContentProps}
      />
    </Tooltip>
  );
});
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = React.forwardRef(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  return (
    <Comp
      ref={ref}
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "after:absolute after:-inset-2 md:after:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0",
        className
      )}
      {...props}
    />
  );
});
SidebarMenuAction.displayName = "SidebarMenuAction";

const SidebarMenuBadge = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-slot="sidebar-menu-badge"
    data-sidebar="menu-badge"
    className={cn(
      "text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
));
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = React.forwardRef(({ className, showIcon = false, ...props }, ref) => {
  const width = useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      ref={ref}
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />}
      <Skeleton
        className="h-4 max-w-[var(--skeleton-width)] flex-1"
        data-sidebar="menu-skeleton-text"
        style={{ "--skeleton-width": width }}
      />
    </div>
  );
});
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = React.forwardRef(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-slot="sidebar-menu-sub"
    data-sidebar="menu-sub"
    className={cn(
      "border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
));
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-slot="sidebar-menu-sub-item"
    data-sidebar="menu-sub-item"
    className={cn("group/menu-sub-item relative", className)}
    {...props}
  />
));
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = React.forwardRef(({ asChild = false, size = "md", isActive = false, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";
  return (
    <Comp
      ref={ref}
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  );
});
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};
-----
components\ui\skeleton.jsx
import { cn } from "@/lib/utils";

function Skeleton({ className, ...props }) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  );
}

export { Skeleton };
-----
components\ui\slider.jsx
import React from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";
import { cn } from "@/lib/utils";

const Slider = React.forwardRef(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };
-----
components\ui\sonner.jsx
import { Toaster as Sonner } from "sonner";

const Toaster = ({ ...props }) => {
  return (
    <Sonner
      theme="light" // Hardcoded for simplicity without a full theme provider
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton: "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton: "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  );
};

export { Toaster };
-----
components\ui\switch.jsx
import React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";
import { cn } from "@/lib/utils";

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };
-----
components\ui\table.jsx
import React from "react";
import { cn } from "@/lib/utils";

const Table = React.forwardRef(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
));
Table.displayName = "Table";

const TableHeader = React.forwardRef(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
));
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
));
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)}
    {...props}
  />
));
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
));
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
));
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
));
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
));
TableCaption.displayName = "TableCaption";

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
};
-----
components\ui\tabs.jsx
import React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";
import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };
-----
components\ui\textarea.jsx
import React from "react";
import { cn } from "@/lib/utils";

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = "Textarea";

export { Textarea };
-----
components\ui\toggle-group.jsx
import React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { cva } from "class-variance-authority";
import { cn } from "@/lib/utils";
import { toggleVariants } from "@/components/ui/toggle";

const ToggleGroupContext = React.createContext({
  size: "default",
  variant: "default",
});

const ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));
ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);
  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});
ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };
-----
components\ui\toggle.jsx
import React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva } from "class-variance-authority";
import { cn } from "@/lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

const Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
));
Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };
-----
components\ui\tooltip.jsx
import React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";
import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;
const Tooltip = TooltipPrimitive.Root;
const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };
-----
context\AppContext.jsx
// src/context/AppContext.jsx
import { createContext, useContext, useState } from 'react';

const AppContext = createContext();

export const useAppContext = () => {
  return useContext(AppContext);
};

export const AppProvider = ({ children }) => {
  // Authentication State
  const [user, setUser] = useState(null);

  // Dashboard State
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  
  // Data for different views
  const [projects, setProjects] = useState([
    {
      id: 'proj_sample_1',
      name: 'Customer Support Bot',
      description: 'AI assistant for handling customer inquiries and support tickets',
      status: 'deployed',
      model: 'gpt-4o',
      version: '1.2.0',
      createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
      lastUpdated: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
      apiCalls: 1547
    },
    {
      id: 'proj_sample_2', 
      name: 'Knowledge Assistant',
      description: 'AI bot trained on company documentation and policies',
      status: 'development',
      model: 'gpt-4o-mini',
      version: '0.5.0',
      createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
      lastUpdated: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
      apiCalls: 234
    }
  ]);
  
  const [teamMembers, setTeamMembers] = useState([]);
  
  const [dataSources, setDataSources] = useState([
     {
      id: 'file_sample_1',
      name: 'company_handbook.pdf',
      type: 'file',
      format: 'pdf',
      size: 2048576,
      status: 'ready',
      uploadedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
      metadata: { pages: 45, words: 12500, characters: 75000 }
    },
    {
      id: 'file_sample_2',
      name: 'product_specifications.docx',
      type: 'file',
      format: 'docx',
      size: 512000,
      status: 'ready',
      uploadedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
      metadata: { pages: 12, words: 3400, characters: 20000 }
    },
    {
      id: 'file_sample_3',
      name: 'faq_data.csv',
      type: 'file',
      format: 'csv',
      size: 128000,
      status: 'processing',
      uploadedAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
      metadata: { words: 850, characters: 5000 }
    }
  ]);
  
  const [playgroundMessages, setPlaygroundMessages] = useState([
     {
      id: 'msg_sample_1',
      type: 'user',
      content: 'How do I create a new project in the platform?',
      timestamp: new Date(Date.now() - 10 * 60 * 1000)
    },
    {
      id: 'msg_sample_2',
      type: 'assistant',
      content: 'To create a new project, click the "New Project" button in the sidebar or on the Projects page. You\'ll be able to choose your AI model, add a description, and configure the settings.',
      timestamp: new Date(Date.now() - 9 * 60 * 1000),
      tokens: 45,
      duration: 1200
    }
  ]);
  
  const [notifications, setNotifications] = useState([
     {
      id: '1',
      title: 'Project Deployed',
      message: 'Your Customer Support Bot has been successfully deployed',
      type: 'success',
      read: false,
      timestamp: new Date().toISOString()
    },
    {
      id: '2', 
      title: 'API Usage Alert',
      message: 'You have used 80% of your monthly API quota',
      type: 'warning',
      read: false,
      timestamp: new Date(Date.now() - 3600000).toISOString()
    }
  ]);

  const [settings, setSettings] = useState({
    notifications: { email: true, browser: true, weekly: true, marketing: false },
    security: { twoFactor: false, sessionTimeout: '24h' },
    appearance: { theme: 'light', language: 'en' }
  });

  const [apiKeys, setApiKeys] = useState([
    {
      id: 'key_1',
      name: 'Production API',
      key: 'sk-proj-abc123...def789',
      created: '2024-01-15',
      lastUsed: '2024-01-20',
      usage: 2847
    },
    {
      id: 'key_2',
      name: 'Development API',
      key: 'sk-proj-xyz456...ghi012',
      created: '2024-01-10',
      lastUsed: '2024-01-19',
      usage: 456
    }
  ]);

  // When the user authenticates, initialize their team members list.
  const handleAuth = (authenticatedUser) => {
    setUser(authenticatedUser);
    setTeamMembers([
      {
        id: authenticatedUser.id,
        name: authenticatedUser.name,
        email: authenticatedUser.email,
        role: authenticatedUser.role,
        status: 'active',
        joinedAt: authenticatedUser.joinedAt,
        lastActive: new Date().toISOString(),
        avatar: authenticatedUser.avatar,
        activityScore: 95,
        permissions: ['all']
      },
      {
        id: 'member_sample_1',
        name: 'Sarah Johnson',
        email: 'sarah@company.com',
        role: 'Developer',
        status: 'active',
        joinedAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),
        lastActive: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=sarah',
        activityScore: 88,
        permissions: ['projects.view', 'projects.create', 'projects.edit']
      },
      {
        id: 'member_sample_2',
        name: 'Mike Chen',
        email: 'mike@company.com', 
        role: 'Editor',
        status: 'pending',
        joinedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
        lastActive: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=mike',
        activityScore: 0,
        permissions: ['projects.view']
      }
    ]);
  };
  
  const handleLogout = () => {
    setUser(null);
    setTeamMembers([]);
  };

  const value = {
    user,
    setUser,
    handleAuth,
    handleLogout,
    sidebarCollapsed,
    setSidebarCollapsed,
    projects,
    setProjects,
    teamMembers,
    setTeamMembers,
    dataSources,
    setDataSources,
    playgroundMessages,
    setPlaygroundMessages,
    notifications,
    setNotifications,
    settings,
    setSettings,
    apiKeys,
    setApiKeys,
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
};
-----
hooks\use-mobile.js
// src/hooks/use-mobile.js
import { useEffect, useState } from "react";

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = useState(undefined);

  useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };

    mql.addEventListener("change", onChange);
    
    // Set initial value
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);

    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}
-----
lib\buttonUtils.js
// Utility functions for button interactions and error handling

import { toast } from 'sonner'

/**
 * Handles an asynchronous action, showing success or error toasts.
 * @param {() => Promise<void>} action - The async function to execute.
 * @param {string} [successMessage] - Optional message to show on success.
 * @param {string} [errorMessage] - Optional message to show on error.
 */
export const handleAsyncButtonAction = async (
  action,
  successMessage,
  errorMessage
) => {
  try {
    await action()
    if (successMessage) {
      toast.success(successMessage)
    }
  } catch (error) {
    console.error('Button action failed:', error)
    toast.error(errorMessage || 'An error occurred. Please try again.')
  }
}

/**
 * Handles a synchronous action, showing success or error toasts.
 * @param {() => void} action - The sync function to execute.
 * @param {string} [successMessage] - Optional message to show on success.
 * @param {string} [errorMessage] - Optional message to show on error.
 */
export const handleSyncButtonAction = (
  action,
  successMessage,
  errorMessage
) => {
  try {
    action()
    if (successMessage) {
      toast.success(successMessage)
    }
  } catch (error) {
    console.error('Button action failed:', error)
    toast.error(errorMessage || 'An error occurred. Please try again.')
  }
}

/**
 * Wraps an async function to automatically handle loading state.
 * @param {(...args: any[]) => Promise<any>} asyncFn - The async function to wrap.
 * @param {(loading: boolean) => void} setLoading - The state setter for the loading state.
 * @returns {(...args: any[]) => Promise<any>} The wrapped function.
 */
export const withButtonLoading = (
  asyncFn,
  setLoading
) => {
  return async (...args) => {
    setLoading(true)
    try {
      return await asyncFn(...args)
    } finally {
      setLoading(false)
    }
  }
}

/**
 * Triggers a file download in the browser.
 * @param {string} content - The content of the file.
 * @param {string} filename - The desired name of the file.
 * @param {string} [mimeType='application/json'] - The MIME type of the file.
 */
export const downloadFile = (content, filename, mimeType = 'application/json') => {
  try {
    const blob = new Blob([content], { type: mimeType })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    toast.success(`${filename} downloaded successfully`)
  } catch (error) {
    console.error('Download failed:', error)
    toast.error('Download failed. Please try again.')
  }
}

/**
 * Copies text to the user's clipboard.
 * @param {string} text - The text to copy.
 * @param {string} [successMessage] - Optional message to show on success.
 */
export const copyToClipboard = async (text, successMessage) => {
  try {
    await navigator.clipboard.writeText(text)
    toast.success(successMessage || 'Copied to clipboard')
  } catch (error) {
    console.error('Copy failed:', error)
    // Fallback for older browsers or insecure contexts
    const textArea = document.createElement('textarea')
    textArea.value = text
    textArea.style.position = 'absolute'
    textArea.style.left = '-9999px'
    document.body.appendChild(textArea)
    textArea.select()
    try {
      document.execCommand('copy')
      toast.success(successMessage || 'Copied to clipboard')
    } catch (fallbackError) {
      toast.error('Failed to copy to clipboard')
    }
    document.body.removeChild(textArea)
  }
}
-----
lib\utils.js
// src/lib/utils.js
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}
-----
styles\theme.css
/* src/styles/theme.css */

@import '@radix-ui/colors/slate.css';
@import '@radix-ui/colors/slate-dark.css';
@import '@radix-ui/colors/slate-alpha.css';
@import '@radix-ui/colors/slate-dark-alpha.css';
@import '@radix-ui/colors/blue.css';
@import '@radix-ui/colors/blue-dark.css';
@import '@radix-ui/colors/violet.css';
@import '@radix-ui/colors/violet-dark.css';

:root {
  /*
    The default border color has changed to `currentColor` in Tailwind CSS v4,
    so we've added these compatibility styles to make sure everything still
    looks the same as it did with Tailwind CSS v3.
  */
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--slate-6);
  }
}

:root, .light, [data-theme='light'] {
    --size-scale: 1;
    --size-0: 0px;
    --size-px: 1px;
    --size-0-5: calc(0.125rem * var(--size-scale));
    --size-1: calc(0.25rem * var(--size-scale));
    --size-1-5: calc(0.375rem * var(--size-scale));
    --size-2: calc(0.5rem * var(--size-scale));
    --size-2-5: calc(0.625rem * var(--size-scale));
    --size-3: calc(0.75rem * var(--size-scale));
    --size-3-5: calc(0.875rem * var(--size-scale));
    --size-4: calc(1rem * var(--size-scale));
    --size-5: calc(1.25rem * var(--size-scale));
    --size-6: calc(1.5rem * var(--size-scale));
    --size-8: calc(2rem * var(--size-scale));
    --size-10: calc(2.5rem * var(--size-scale));
    --size-12: calc(3rem * var(--size-scale));
    --size-16: calc(4rem * var(--size-scale));
    --size-24: calc(6rem * var(--size-scale));
    --size-32: calc(8rem * var(--size-scale));

    --radius-factor: 1;
    --radius-sm: calc(2px * var(--radius-factor) * var(--size-scale));
    --radius-md: calc(6px * var(--radius-factor) * var(--size-scale));
    --radius-lg: calc(8px * var(--radius-factor) * var(--size-scale));
    --radius-xl: calc(12px * var(--radius-factor) * var(--size-scale));
    --radius-full: 9999px;

    /* Neutral colors */
    --color-neutral-1: var(--slate-1);
    --color-neutral-2: var(--slate-2);
    --color-neutral-3: var(--slate-3);
    --color-neutral-4: var(--slate-4);
    --color-neutral-5: var(--slate-5);
    --color-neutral-6: var(--slate-6);
    --color-neutral-7: var(--slate-7);
    --color-neutral-8: var(--slate-8);
    --color-neutral-9: var(--slate-9);
    --color-neutral-10: var(--slate-10);
    --color-neutral-11: var(--slate-11);
    --color-neutral-12: var(--slate-12);

    /* Accent colors */
    --color-accent-1: var(--blue-1);
    --color-accent-2: var(--blue-2);
    --color-accent-3: var(--blue-3);
    --color-accent-4: var(--blue-4);
    --color-accent-5: var(--blue-5);
    --color-accent-6: var(--blue-6);
    --color-accent-7: var(--blue-7);
    --color-accent-8: var(--blue-8);
    --color-accent-9: var(--blue-9);
    --color-accent-10: var(--blue-10);
    --color-accent-11: var(--blue-11);
    --color-accent-12: var(--blue-12);

    /* Foreground colors */
    --color-fg: var(--color-neutral-12);
    --color-fg-secondary: var(--color-neutral-11);

    /* Background colors */
    --color-bg: #ffffff;
    --color-bg-inset: var(--color-neutral-2);
    --color-bg-overlay: #ffffff;

    /* Focus ring */
    --color-focus-ring: var(--color-accent-9);
}

.dark, [data-theme='dark'] {
    --color-neutral-1: var(--slate-dark-1);
    --color-neutral-2: var(--slate-dark-2);
    --color-neutral-3: var(--slate-dark-3);
    --color-neutral-4: var(--slate-dark-4);
    --color-neutral-5: var(--slate-dark-5);
    --color-neutral-6: var(--slate-dark-6);
    --color-neutral-7: var(--slate-dark-7);
    --color-neutral-8: var(--slate-dark-8);
    --color-neutral-9: var(--slate-dark-9);
    --color-neutral-10: var(--slate-dark-10);
    --color-neutral-11: var(--slate-dark-11);
    --color-neutral-12: var(--slate-dark-12);

    --color-accent-1: var(--blue-dark-1);
    --color-accent-2: var(--blue-dark-2);
    --color-accent-3: var(--blue-dark-3);
    --color-accent-4: var(--blue-dark-4);
    --color-accent-5: var(--blue-dark-5);
    --color-accent-6: var(--blue-dark-6);
    --color-accent-7: var(--blue-dark-7);
    --color-accent-8: var(--blue-dark-8);
    --color-accent-9: var(--blue-dark-9);
    --color-accent-10: var(--blue-dark-10);
    --color-accent-11: var(--blue-dark-11);
    --color-accent-12: var(--blue-dark-12);

    --color-bg: var(--color-neutral-1);
    --color-bg-inset: #000000;
    --color-bg-overlay: var(--color-neutral-3);
}
